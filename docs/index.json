{
  "api/DotNetHelper.Database.Interface.html": {
    "href": "api/DotNetHelper.Database.Interface.html",
    "title": "Namespace DotNetHelper.Database.Interface | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database.Interface Interfaces IColumnSerializer IDatabaseAccess"
  },
  "api/DotNetHelper.Database.DataSource.html": {
    "href": "api/DotNetHelper.Database.DataSource.html",
    "title": "Namespace DotNetHelper.Database.DataSource | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database.DataSource Classes DatabaseAccess<C, P>"
  },
  "api/DotNetHelper.Database.html": {
    "href": "api/DotNetHelper.Database.html",
    "title": "Namespace DotNetHelper.Database | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database Classes DatabaseAccessFactory"
  },
  "api/DotNetHelper.Database.Interface.IDatabaseAccess.html": {
    "href": "api/DotNetHelper.Database.Interface.IDatabaseAccess.html",
    "title": "Interface IDatabaseAccess | DotNetHelper.Database",
    "keywords": "Interface IDatabaseAccess Namespace : DotNetHelper.Database.Interface Assembly : DotNetHelper.Database.dll Syntax public interface IDatabaseAccess Properties | Improve this Doc View Source CommandTimeOut The time in seconds to wait for the command to execute. The default is 30 seconds. Declaration TimeSpan CommandTimeOut { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source ConnectionTimeOut The time (in seconds) to wait for a connection to open. The default value is 15 seconds. Declaration TimeSpan ConnectionTimeOut { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DatabaseType The type of database. This property is only used to control how sql is generated Declaration DataBaseType DatabaseType { get; } Property Value Type Description DotNetHelper.ObjectToSql.Enum.DataBaseType Methods | Improve this Doc View Source CanConnect() Attempts to open a connection to the database using the connection string provided in the constructor. Declaration bool CanConnect() Returns Type Description Boolean | Improve this Doc View Source Execute<T>(T, ActionType) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration int Execute<T>(T instance, ActionType actionType) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Returns Type Description Int32 of rows affected Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration int Execute<T>(T instance, ActionType actionType, string tableName) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] keyFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Expression < Func <T, Object >>[] keyFields Override attributes and specified which properties are keys from an expression Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration int Execute<T>(T instance, ActionType actionType, string tableName, params Expression<Func<T, object>>[] keyFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Expression < Func <T, Object >>[] keyFields Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Creates the sql and applies the reflected values tothe specified SQL from the object then executes t the instance provided. This is useful when dealing with identity fields Declaration T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Func < String , Type , Object > xmlDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < String , Type , Object > jsonDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < String , Type , Object > csvDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Expression < Func <T, Object >>[] outputFields Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and applies the reflected values to the instance provided. This is useful when dealing with identity fields Declaration T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Expression < Func <T, Object >>[] outputFields the fields to return that will reflect the values after the sql is executed Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Declaration IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance DotNetHelper.ObjectToSql.Enum.ActionType actionType Func < Object , String > xmlSerializer Func < Object , String > jsonSerializer Func < Object , String > csvSerializer Expression < Func <T, Object >>[] outputFields Returns Type Description IDataReader Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[]) Declaration IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance DotNetHelper.ObjectToSql.Enum.ActionType actionType Expression < Func <T, Object >>[] outputFields Returns Type Description IDataReader Type Parameters Name Description T | Improve this Doc View Source ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>) Execute an SQL Command and returns the number of rows affected Declaration int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description Int32 Exceptions Type Condition InvalidOperationException | Improve this Doc View Source ExecuteScalar(String, CommandType, List<DbParameter>) Executes the sql and return the 1st column of the 1st row as an object Declaration object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description Object | Improve this Doc View Source ExecuteTransaction(List<String>, Boolean, Boolean) Executes a list of sql as in a single transaction Declaration int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true) Parameters Type Name Description List < String > sqls Boolean rollbackOnException Boolean throwException Returns Type Description Int32 | Improve this Doc View Source Get<T>() return a list of type of T from the database. Declaration List<T> Get<T>() where T : class Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>) return a list of type of T from the database. Declaration List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer) where T : class Parameters Type Name Description Func < String , Type , Object > xmlDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < String , Type , Object > jsonDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < String , Type , Object > csvDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(String, CommandType, List<DbParameter>) Executes the sql and map the results to a list of type of T Declaration List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null) where T : class Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>) Executes the specified sql and maps the results a list of objects Declaration List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null) where T : class Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer List < DbParameter > parameters Returns Type Description List <T> The sql result mapped to a list of Type Parameters Name Description T | Improve this Doc View Source GetDataReader(String, CommandType, List<DbParameter>) execute the sql and return the result as a IDataReader Declaration IDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description IDataReader | Improve this Doc View Source GetDataTable(String) execute the sql and load the results into a dataTable Declaration DataTable GetDataTable(string selectSql) Parameters Type Name Description String selectSql Returns Type Description DataTable | Improve this Doc View Source GetDataTable(String, CommandType, List<DbParameter>) execute the sql and load the results into a dataTable Declaration DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String selectSql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithKeyInfo(String) Applies the schema/metadata of the sql to a dataTable and populate it with the result set. If working with a large dataSet and you don't need the dataTable which columns are primary keys then use GetDataTableWithSchema for better proformance Declaration DataTable GetDataTableWithKeyInfo(string sql) Parameters Type Name Description String sql Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>) Applies the schema/metadata of the sql to a dataTable and populate it with the result set. If working with a large dataSet and you don't need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance Declaration DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithSchema(String) Applies the schema/metadata of the sql to a dataTable and populate it with the result set Declaration DataTable GetDataTableWithSchema(string sql) Parameters Type Name Description String sql Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithSchema(String, CommandType, List<DbParameter>) Applies the schema/metadata of the sql to a dataTable and populate it with the result set Declaration DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>) creates a new dbcommand from the connection Declaration IDbCommand GetNewCommand(IDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description IDbConnection connection String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description IDbCommand | Improve this Doc View Source GetNewCommandAndTransaction(IDbConnection) Declaration (IDbCommand command, IDbTransaction transaction)GetNewCommandAndTransaction(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description ValueTuple < IDbCommand , IDbTransaction > | Improve this Doc View Source GetNewParameter(String, Object) Declaration DbParameter GetNewParameter(string parameterName, object value) Parameters Type Name Description String parameterName Object value Returns Type Description DbParameter"
  },
  "api/DotNetHelper.Database.DatabaseAccessFactory.html": {
    "href": "api/DotNetHelper.Database.DatabaseAccessFactory.html",
    "title": "Class DatabaseAccessFactory | DotNetHelper.Database",
    "keywords": "Class DatabaseAccessFactory Inheritance Object DatabaseAccessFactory Implements IDatabaseAccess Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database Assembly : DotNetHelper.Database.dll Syntax public class DatabaseAccessFactory : IDatabaseAccess Constructors | Improve this Doc View Source DatabaseAccessFactory(DataBaseType, String, Nullable<TimeSpan>, Nullable<TimeSpan>) Declaration public DatabaseAccessFactory(DataBaseType type, string connectionString = null, TimeSpan? commandTimeOut = default(TimeSpan? ), TimeSpan? connectionTimeOut = default(TimeSpan? )) Parameters Type Name Description DotNetHelper.ObjectToSql.Enum.DataBaseType type String connectionString Nullable < TimeSpan > commandTimeOut Nullable < TimeSpan > connectionTimeOut | Improve this Doc View Source DatabaseAccessFactory(DbProviderFactory, DataBaseType, Nullable<TimeSpan>, Nullable<TimeSpan>) Declaration public DatabaseAccessFactory(DbProviderFactory dbProviderFactory, DataBaseType type, TimeSpan? commandTimeOut = default(TimeSpan? ), TimeSpan? connectionTimeOut = default(TimeSpan? )) Parameters Type Name Description DbProviderFactory dbProviderFactory DotNetHelper.ObjectToSql.Enum.DataBaseType type Nullable < TimeSpan > commandTimeOut Nullable < TimeSpan > connectionTimeOut Properties | Improve this Doc View Source CommandTimeOut The time in seconds to wait for the command to execute. The default is 30 seconds. Declaration public TimeSpan CommandTimeOut { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source ConnectionTimeOut The time (in seconds) to wait for a connection to open. The default value is 15 seconds. Declaration public TimeSpan ConnectionTimeOut { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DatabaseType The type of database. This property is only used to control how sql is generated Declaration public DataBaseType DatabaseType { get; } Property Value Type Description DotNetHelper.ObjectToSql.Enum.DataBaseType | Improve this Doc View Source DbProviderFactory Declaration public DbProviderFactory DbProviderFactory { get; } Property Value Type Description DbProviderFactory Methods | Improve this Doc View Source CanConnect() Attempts to open a connection to the database using the connection string provided in the constructor. Declaration public bool CanConnect() Returns Type Description Boolean | Improve this Doc View Source Execute<T>(T, ActionType) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Returns Type Description Int32 of rows affected Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] keyFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Expression < Func <T, Object >>[] keyFields Override attributes and specified which properties are keys from an expression Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName, params Expression<Func<T, object>>[] keyFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Expression < Func <T, Object >>[] keyFields Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Creates the sql and applies the reflected values tothe specified SQL from the object then executes t the instance provided. This is useful when dealing with identity fields Declaration public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Func < String , Type , Object > xmlDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < String , Type , Object > jsonDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < String , Type , Object > csvDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Expression < Func <T, Object >>[] outputFields Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and applies the reflected values to the instance provided. This is useful when dealing with identity fields Declaration public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Expression < Func <T, Object >>[] outputFields the fields to return that will reflect the values after the sql is executed Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Declaration public IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance DotNetHelper.ObjectToSql.Enum.ActionType actionType Func < Object , String > xmlSerializer Func < Object , String > jsonSerializer Func < Object , String > csvSerializer Expression < Func <T, Object >>[] outputFields Returns Type Description IDataReader Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[]) Declaration public IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance DotNetHelper.ObjectToSql.Enum.ActionType actionType Expression < Func <T, Object >>[] outputFields Returns Type Description IDataReader Type Parameters Name Description T | Improve this Doc View Source ExecuteNonQuery(DbConnection, String, CommandType, IEnumerable<IDataParameter>) Execute an SQL Command against the specified C and returns the number of rows affected Declaration public int ExecuteNonQuery(DbConnection dbConnection, string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description DbConnection dbConnection String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>) Execute an SQL Command and returns the number of rows affected Declaration public int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description Int32 Exceptions Type Condition InvalidOperationException | Improve this Doc View Source ExecuteScalar(DbConnection, String, CommandType, List<DbParameter>) Executes the sql and return the 1st column of the 1st row as an object Declaration public object ExecuteScalar(DbConnection connection, string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description DbConnection connection String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description Object | Improve this Doc View Source ExecuteScalar(String, CommandType, List<DbParameter>) Executes the sql and return the 1st column of the 1st row as an object Declaration public object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description Object | Improve this Doc View Source ExecuteTransaction(List<String>, Boolean, Boolean) Executes a list of sql as in a single transaction Declaration public int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true) Parameters Type Name Description List < String > sqls Boolean rollbackOnException Boolean throwException Returns Type Description Int32 | Improve this Doc View Source ExecuteTransaction(DbConnection, List<String>, Boolean, Boolean) Executes a list of sql as in a single transaction. Declaration public int ExecuteTransaction(DbConnection connection, List<string> sqls, bool rollbackOnException, bool throwException = true) Parameters Type Name Description DbConnection connection List < String > sqls Boolean rollbackOnException Boolean throwException Returns Type Description Int32 | Improve this Doc View Source Get<T>() return a list of type of T from the database. Declaration public List<T> Get<T>() where T : class Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(DbConnection, String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>) Executes the specified sql and maps the results a list of objects Declaration public List<T> Get<T>(DbConnection connection, string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null) where T : class Parameters Type Name Description DbConnection connection String sql CommandType commandType Specifies how a command string is interpreted. Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer List < DbParameter > parameters Returns Type Description List <T> The sql result mapped to a list of Type Parameters Name Description T | Improve this Doc View Source Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>) return a list of type of T from the database. Declaration public List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer) where T : class Parameters Type Name Description Func < String , Type , Object > xmlDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < String , Type , Object > jsonDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < String , Type , Object > csvDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(String, CommandType, List<DbParameter>) Executes the sql and map the results to a list of type of T Declaration public List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null) where T : class Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>) Executes the specified sql and maps the results a list of objects Declaration public List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null) where T : class Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer List < DbParameter > parameters Returns Type Description List <T> The sql result mapped to a list of Type Parameters Name Description T | Improve this Doc View Source GetDataReader(DbConnection, String, CommandType, List<DbParameter>) execute the sql and return the result as a IDataReader Declaration public IDataReader GetDataReader(DbConnection connection, string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description DbConnection connection String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description IDataReader | Improve this Doc View Source GetDataReader(String, CommandType, List<DbParameter>) execute the sql and return the result as a IDataReader Declaration public IDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description IDataReader | Improve this Doc View Source GetDataTable(String) execute the sql and load the results into a dataTable Declaration public DataTable GetDataTable(string selectSql) Parameters Type Name Description String selectSql Returns Type Description DataTable | Improve this Doc View Source GetDataTable(String, CommandType, List<DbParameter>) execute the sql and load the results into a dataTable Declaration public DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String selectSql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithKeyInfo(String) Applies the schema/metadata of the sql to a dataTable and populate it with the result set. If working with a large dataSet and you don't need the dataTable which columns are primary keys then use GetDataTableWithSchema for better proformance Declaration public DataTable GetDataTableWithKeyInfo(string sql) Parameters Type Name Description String sql Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>) Applies the schema/metadata of the sql to a dataTable and populate it with the result set. If working with a large dataSet and you don't need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance Declaration public DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithSchema(String) Applies the schema/metadata of the sql to a dataTable and populate it with the result set Declaration public DataTable GetDataTableWithSchema(string sql) Parameters Type Name Description String sql Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithSchema(String, CommandType, List<DbParameter>) Applies the schema/metadata of the sql to a dataTable and populate it with the result set Declaration public DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>) creates a new dbcommand from the connection Declaration public IDbCommand GetNewCommand(IDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description IDbConnection connection String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description IDbCommand | Improve this Doc View Source GetNewCommandAndTransaction(IDbConnection) Declaration public (IDbCommand command, IDbTransaction transaction)GetNewCommandAndTransaction(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description ValueTuple < IDbCommand , IDbTransaction > | Improve this Doc View Source GetNewConnection(Boolean) Declaration public DbConnection GetNewConnection(bool openConnection) Parameters Type Name Description Boolean openConnection Returns Type Description DbConnection | Improve this Doc View Source GetNewParameter(String, Object) Declaration public DbParameter GetNewParameter(string parameterName, object value) Parameters Type Name Description String parameterName Object value Returns Type Description DbParameter Implements IDatabaseAccess"
  },
  "api/DotNetHelper.Database.DataSource.DatabaseAccess-2.html": {
    "href": "api/DotNetHelper.Database.DataSource.DatabaseAccess-2.html",
    "title": "Class DatabaseAccess<C, P> | DotNetHelper.Database",
    "keywords": "Class DatabaseAccess<C, P> Inheritance Object DatabaseAccess<C, P> Implements IDatabaseAccess Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.DataSource Assembly : DotNetHelper.Database.dll Syntax public class DatabaseAccess<C, P> : IDatabaseAccess where C : class, IDbConnection, IDisposable, new() where P : DbParameter, new() Type Parameters Name Description C P Constructors | Improve this Doc View Source DatabaseAccess(DataBaseType, String) Declaration public DatabaseAccess(DataBaseType type, string connectionString) Parameters Type Name Description DotNetHelper.ObjectToSql.Enum.DataBaseType type String connectionString | Improve this Doc View Source DatabaseAccess(DataBaseType, String, TimeSpan) Declaration public DatabaseAccess(DataBaseType type, string connectionString, TimeSpan commandTimeOut) Parameters Type Name Description DotNetHelper.ObjectToSql.Enum.DataBaseType type String connectionString TimeSpan commandTimeOut | Improve this Doc View Source DatabaseAccess(DataBaseType, String, TimeSpan, TimeSpan) Declaration public DatabaseAccess(DataBaseType type, string connectionString, TimeSpan commandTimeOut, TimeSpan connectionTimeOut) Parameters Type Name Description DotNetHelper.ObjectToSql.Enum.DataBaseType type String connectionString TimeSpan commandTimeOut TimeSpan connectionTimeOut Properties | Improve this Doc View Source CommandTimeOut The time in seconds to wait for the command to execute. The default is 30 seconds. Declaration public TimeSpan CommandTimeOut { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source ConnectionTimeOut The time (in seconds) to wait for a connection to open. The default value is 15 seconds. Declaration public TimeSpan ConnectionTimeOut { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DatabaseType The type of database. This property is only used to control how sql is generated Declaration public DataBaseType DatabaseType { get; } Property Value Type Description DotNetHelper.ObjectToSql.Enum.DataBaseType Methods | Improve this Doc View Source CanConnect() Attempts to open a connection to the database using the connection string provided in the constructor. Declaration public bool CanConnect() Returns Type Description Boolean | Improve this Doc View Source Execute<T>(T, ActionType) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Returns Type Description Int32 of rows affected Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] keyFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Expression < Func <T, Object >>[] keyFields Override attributes and specified which properties are keys from an expression Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and return the number of rows affected. Declaration public int Execute<T>(T instance, ActionType actionType, string tableName, params Expression<Func<T, object>>[] keyFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate String tableName Table name to use when generating sql Expression < Func <T, Object >>[] keyFields Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Creates the sql and applies the reflected values tothe specified SQL from the object then executes t the instance provided. This is useful when dealing with identity fields Declaration public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Func < String , Type , Object > xmlDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < String , Type , Object > jsonDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < String , Type , Object > csvDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Func < Object , String > xmlSerializer For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < Object , String > jsonSerializer For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < Object , String > csvSerializer For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Expression < Func <T, Object >>[] outputFields Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[]) Creates the specified SQL from the object then executes the sql and applies the reflected values to the instance provided. This is useful when dealing with identity fields Declaration public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance the object to create sql from DotNetHelper.ObjectToSql.Enum.ActionType actionType type of sql to generate Expression < Func <T, Object >>[] outputFields the fields to return that will reflect the values after the sql is executed Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[]) Declaration public IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance DotNetHelper.ObjectToSql.Enum.ActionType actionType Func < Object , String > xmlSerializer Func < Object , String > jsonSerializer Func < Object , String > csvSerializer Expression < Func <T, Object >>[] outputFields Returns Type Description IDataReader Type Parameters Name Description T | Improve this Doc View Source ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[]) Declaration public IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description T instance DotNetHelper.ObjectToSql.Enum.ActionType actionType Expression < Func <T, Object >>[] outputFields Returns Type Description IDataReader Type Parameters Name Description T | Improve this Doc View Source ExecuteNonQuery(C, String, CommandType, IEnumerable<IDataParameter>) Execute an SQL Command against the specified C and returns the number of rows affected Declaration public int ExecuteNonQuery(C connection, string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description C connection String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>) Execute an SQL Command and returns the number of rows affected Declaration public int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description Int32 Exceptions Type Condition InvalidOperationException | Improve this Doc View Source ExecuteScalar(C, String, CommandType, List<DbParameter>) Executes the sql and return the 1st column of the 1st row as an object Declaration public object ExecuteScalar(C connection, string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description C connection String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description Object | Improve this Doc View Source ExecuteScalar(String, CommandType, List<DbParameter>) Executes the sql and return the 1st column of the 1st row as an object Declaration public object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description Object | Improve this Doc View Source ExecuteTransaction(C, List<String>, Boolean, Boolean) Executes a list of sql as in a single transaction. Declaration public int ExecuteTransaction(C connection, List<string> sqls, bool rollbackOnException, bool throwException = true) Parameters Type Name Description C connection List < String > sqls Boolean rollbackOnException Boolean throwException Returns Type Description Int32 | Improve this Doc View Source ExecuteTransaction(List<String>, Boolean, Boolean) Executes a list of sql as in a single transaction Declaration public int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true) Parameters Type Name Description List < String > sqls Boolean rollbackOnException Boolean throwException Returns Type Description Int32 | Improve this Doc View Source Get<T>() return a list of type of T from the database. Declaration public List<T> Get<T>() where T : class Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(C, String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>) Executes the specified sql and maps the results a list of objects Declaration public List<T> Get<T>(C connection, string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null) where T : class Parameters Type Name Description C connection String sql CommandType commandType Specifies how a command string is interpreted. Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer List < DbParameter > parameters Returns Type Description List <T> The sql result mapped to a list of Type Parameters Name Description T | Improve this Doc View Source Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>) return a list of type of T from the database. Declaration public List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer) where T : class Parameters Type Name Description Func < String , Type , Object > xmlDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)] Func < String , Type , Object > jsonDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)] Func < String , Type , Object > csvDeserializer Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)] Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(String, CommandType, List<DbParameter>) Executes the sql and map the results to a list of type of T Declaration public List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null) where T : class Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>) Executes the specified sql and maps the results a list of objects Declaration public List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null) where T : class Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer List < DbParameter > parameters Returns Type Description List <T> The sql result mapped to a list of Type Parameters Name Description T | Improve this Doc View Source GetDataReader(C, String, CommandType, List<DbParameter>) execute the sql and return the result as a IDataReader Declaration public IDataReader GetDataReader(C connection, string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description C connection String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description IDataReader | Improve this Doc View Source GetDataReader(String, CommandType, List<DbParameter>) execute the sql and return the result as a IDataReader Declaration public IDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description IDataReader | Improve this Doc View Source GetDataTable(String) execute the sql and load the results into a dataTable Declaration public DataTable GetDataTable(string selectSql) Parameters Type Name Description String selectSql Returns Type Description DataTable | Improve this Doc View Source GetDataTable(String, CommandType, List<DbParameter>) execute the sql and load the results into a dataTable Declaration public DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String selectSql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithKeyInfo(String) Applies the schema/metadata of the sql to a dataTable and populate it with the result set. If working with a large dataSet and you don't need the dataTable which columns are primary keys then use GetDataTableWithSchema for better proformance Declaration public DataTable GetDataTableWithKeyInfo(string sql) Parameters Type Name Description String sql Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>) Applies the schema/metadata of the sql to a dataTable and populate it with the result set. If working with a large dataSet and you don't need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance Declaration public DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithSchema(String) Applies the schema/metadata of the sql to a dataTable and populate it with the result set Declaration public DataTable GetDataTableWithSchema(string sql) Parameters Type Name Description String sql Returns Type Description DataTable | Improve this Doc View Source GetDataTableWithSchema(String, CommandType, List<DbParameter>) Applies the schema/metadata of the sql to a dataTable and populate it with the result set Declaration public DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null) Parameters Type Name Description String sql CommandType commandType Specifies how a command string is interpreted. List < DbParameter > parameters Returns Type Description DataTable | Improve this Doc View Source GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>) creates a new dbcommand from the connection Declaration public IDbCommand GetNewCommand(IDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<IDataParameter> parameters = null) Parameters Type Name Description IDbConnection connection String sql CommandType commandType Specifies how a command string is interpreted. IEnumerable < IDataParameter > parameters Returns Type Description IDbCommand | Improve this Doc View Source GetNewCommandAndTransaction(IDbConnection) Declaration public (IDbCommand command, IDbTransaction transaction)GetNewCommandAndTransaction(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description ValueTuple < IDbCommand , IDbTransaction > | Improve this Doc View Source GetNewConnection(Boolean) creates a new connection object Declaration public C GetNewConnection(bool openConnection) Parameters Type Name Description Boolean openConnection Returns Type Description C | Improve this Doc View Source GetNewParameter(String, Object) Declaration public DbParameter GetNewParameter(string parameterName, object value) Parameters Type Name Description String parameterName Object value Returns Type Description DbParameter Implements IDatabaseAccess"
  },
  "tutorials/GenerateSql/datatable2sql.html": {
    "href": "tutorials/GenerateSql/datatable2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper.Database",
    "keywords": "SAMPLE ARTICLE"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper.Database | DotNetHelper.Database",
    "keywords": "DotNetHelper.Database *DotNetHelper.Database is a lightweight ORM that works with generics,dynamic, & anonyous objects for ADO.NET * || View on Github || Features Can dynamically build your sql statement from any (Generic,Anonymous,Dynamic) object but also support you providing on as well Can (Insert,Update,Upsert,Delete) any (Generic,Anonymous,Dynamic) object into database Support Any IDbConnection & work with DbFactory Support auto-serializing & deserializing columns that is as stored as CSV,JSON, & XML in the database You implement the serialization so we don't have to depend on libraries like newtonsoft.json Map List To DataTable Map DataTable To List Map IDataReader To List Map DataRow To A Class Supported Databases SQLSERVER SQLITE More to come Example For this example my table in the database will look like this CREATE TABLE [master].[dbo].[Employee]( [IdentityField] [int] NOT NULL IDENTITY (1,1) PRIMARY KEY, [FirstName] [varchar](400) NOT NULL, [LastName] [varchar](400) NOT NULL, [DOB] DateTime NOT NULL, [CreatedAt] DateTime NOT NULL DEFAULT GETDATE(), [FavoriteColor] [varchar](400) NULL ); My generic object class will look like this public class Employee { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Marks this property as an identity field [Key] // marks this property as a primary key... public int IdentityField { get; set; } [NotMapped] // This property will be ignore when performing database actions public string FullName => FirstName + \" \" + LastName; [SqlColumn(MapTo = \"DOB\")] // This property is actually name DOB in the database public DateTime DateOfBirth { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public string FavoriteColor { get; set; } public DateTime CreatedAt { get; } = new DateTime(); } Now lets add some new employees from code using dynamic,anonymous & generic objects dynamic dynamicEmployee = new ExpandoObject(); // A DYNAMIC EMPLOYEE dynamicEmployee.FirstName = \"Joe Sister\"; dynamicEmployee.LastName = \"Dynamic\"; dynamicEmployee.DOB = DateTime.Today.AddDays(-2); var employee = new Employee() {DateOfBirth = DateTime.Today, FavoriteColor = \"Blue\", FirstName = \"Joe\" , LastName = \"Generic\"}; // A GENERIC EMPLOYEE var anonymousEmployee = new {FirstName = \"Joe Brother\", DOB = DateTime.Today.AddDays(-1) , LastName = \"Anonymous\"}; // A ANONYMOUS EMPLOYEE var dbAccess = new DatabaseAccess<SqlConnection, SqlParameter>(DataBaseType.SqlServer, \"Server=localhost;Initial Catalog=master;Integrated Security=True\"); // Specify database provider to ensure syntax is correct // Lets add our 3 employees to the database note var recordAffected = dbAccess.Execute(employee, ActionType.Insert); // ActionType is a enum of Insert,Update,Delete,Upsert recordAffected += dbAccess.Execute(anonymousEmployee, ActionType.Insert,\"Employee\"); // you need to specify the table name when using anonymous objects recordAffected += dbAccess.Execute<ExpandoObject>(dynamicEmployee, ActionType.Insert,\"Employee\"); // you need to specify the table name when using dynamic objects Finish Product <!-- Links. --> <!-- Documentation Links. -->"
  },
  "tutorials/GenerateSql/object2sql.html": {
    "href": "tutorials/GenerateSql/object2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper.Database",
    "keywords": "SAMPLE ARTICLE"
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "| DotNetHelper.Database",
    "keywords": ""
  },
  "tutorials/Attributes/attribute.html": {
    "href": "tutorials/Attributes/attribute.html",
    "title": "Custom Attributes | DotNetHelper.Database",
    "keywords": "Custom Attributes In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. This library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework Mark a property as an identity fields. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] Mark a property as a key field. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] <!-- #### Storing Columns As CSV, XML, & JSON ```csharp [SqlColumn(SerializableType = SerializableType.Json)] or [SqlColumn(SerializableType = SerializableType.Xml)] or [SqlColumn(SerializableType = SerializableType.Csv)] ``` -->"
  },
  "api/DotNetHelper.Database.Models.QueryBucketManager.html": {
    "href": "api/DotNetHelper.Database.Models.QueryBucketManager.html",
    "title": "Class QueryBucketManager | DotNetHelper.Database",
    "keywords": "Class QueryBucketManager Inheritance Object QueryBucketManager Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Models Assembly : DotNetHelper.Database.dll Syntax public class QueryBucketManager : IDisposable Constructors | Improve this Doc View Source QueryBucketManager() Declaration public QueryBucketManager() Properties | Improve this Doc View Source IncludeReadableQuery Declaration public bool IncludeReadableQuery { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaxBucketSize Declaration public int MaxBucketSize { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddBucket(QueryBucket) Declaration public void AddBucket(QueryBucket bucket) Parameters Type Name Description QueryBucket bucket | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnBeforeAdd(QueryBucketEventArgs) Declaration protected virtual void OnBeforeAdd(QueryBucketEventArgs e) Parameters Type Name Description QueryBucketEventArgs e | Improve this Doc View Source OnFullBucket(FullQueryBucketEventArgs) Declaration protected virtual void OnFullBucket(FullQueryBucketEventArgs e) Parameters Type Name Description FullQueryBucketEventArgs e Events | Improve this Doc View Source BeforeAddToBucket Declaration public event QueryBucketManager.OnBeforeAddToBucketEventHandler BeforeAddToBucket Event Type Type Description QueryBucketManager.OnBeforeAddToBucketEventHandler | Improve this Doc View Source FullBucketReached Declaration public event QueryBucketManager.FullQueryBucketEventHandler FullBucketReached Event Type Type Description QueryBucketManager.FullQueryBucketEventHandler Implements System.IDisposable"
  },
  "api/DotNetHelper.Database.Extension.TypeExtension.html": {
    "href": "api/DotNetHelper.Database.Extension.TypeExtension.html",
    "title": "Class TypeExtension | DotNetHelper.Database",
    "keywords": "Class TypeExtension Inheritance Object TypeExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Extension Assembly : DotNetHelper.Database.dll Syntax public static class TypeExtension Methods | Improve this Doc View Source IsNullable(Type) Declaration public static (bool isNullableT, Type underlyingType)IsNullable(this Type type) Parameters Type Name Description Type type Returns Type Description ValueTuple < Boolean , Type > | Improve this Doc View Source IsTypeAnonymousType(Type) Declaration public static bool IsTypeAnonymousType(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsTypeDynamic(Type) Declaration public static bool IsTypeDynamic(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean"
  },
  "api/DotNetHelper.Database.Models.QueryBucketManager.FullQueryBucketEventHandler.html": {
    "href": "api/DotNetHelper.Database.Models.QueryBucketManager.FullQueryBucketEventHandler.html",
    "title": "Delegate QueryBucketManager.FullQueryBucketEventHandler | DotNetHelper.Database",
    "keywords": "Delegate QueryBucketManager.FullQueryBucketEventHandler Namespace : DotNetHelper.Database.Models Assembly : DotNetHelper.Database.dll Syntax public delegate void FullQueryBucketEventHandler(object sender, FullQueryBucketEventArgs e); Parameters Type Name Description Object sender FullQueryBucketEventArgs e"
  },
  "api/DotNetHelper.Database.Helper.DBProviderHelper.html": {
    "href": "api/DotNetHelper.Database.Helper.DBProviderHelper.html",
    "title": "Class DBProviderHelper | DotNetHelper.Database",
    "keywords": "Class DBProviderHelper Inheritance Object DBProviderHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Helper Assembly : DotNetHelper.Database.dll Syntax public static class DBProviderHelper Properties | Improve this Doc View Source Map Declaration public static Dictionary<DataBaseType, string> Map { get; } Property Value Type Description Dictionary < DotNetHelper.ObjectToSql.Enum.DataBaseType , String >"
  },
  "api/DotNetHelper.Database.EventHandler.SqlExceptionEventArgs.html": {
    "href": "api/DotNetHelper.Database.EventHandler.SqlExceptionEventArgs.html",
    "title": "Class SqlExceptionEventArgs | DotNetHelper.Database",
    "keywords": "Class SqlExceptionEventArgs Inheritance Object EventArgs SqlExceptionEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.EventHandler Assembly : DotNetHelper.Database.dll Syntax public class SqlExceptionEventArgs : EventArgs Constructors | Improve this Doc View Source SqlExceptionEventArgs(Exception) Declaration public SqlExceptionEventArgs(Exception error) Parameters Type Name Description Exception error | Improve this Doc View Source SqlExceptionEventArgs(Exception, String) Declaration public SqlExceptionEventArgs(Exception error, string sql) Parameters Type Name Description Exception error String sql Properties | Improve this Doc View Source Exception Declaration public Exception Exception { get; } Property Value Type Description Exception | Improve this Doc View Source Sql Declaration public string Sql { get; } Property Value Type Description String"
  },
  "api/DotNetHelper.Database.Extension.DBConnectionExtension.html": {
    "href": "api/DotNetHelper.Database.Extension.DBConnectionExtension.html",
    "title": "Class DBConnectionExtension | DotNetHelper.Database",
    "keywords": "Class DBConnectionExtension Inheritance Object DBConnectionExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Extension Assembly : DotNetHelper.Database.dll Syntax public static class DBConnectionExtension Methods | Improve this Doc View Source CloseSafely(IDbConnection) Declaration public static void CloseSafely(this IDbConnection connection) Parameters Type Name Description IDbConnection connection | Improve this Doc View Source OpenSafely(IDbConnection) Declaration public static void OpenSafely(this IDbConnection connection) Parameters Type Name Description IDbConnection connection"
  },
  "api/DotNetHelper.Database.EventHandler.html": {
    "href": "api/DotNetHelper.Database.EventHandler.html",
    "title": "Namespace DotNetHelper.Database.EventHandler | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database.EventHandler Classes SqlExceptionEventArgs"
  },
  "api/DotNetHelper.Database.Extension.ExtDataTable.html": {
    "href": "api/DotNetHelper.Database.Extension.ExtDataTable.html",
    "title": "Class ExtDataTable | DotNetHelper.Database",
    "keywords": "Class ExtDataTable Inheritance Object ExtDataTable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Extension Assembly : DotNetHelper.Database.dll Syntax public static class ExtDataTable Methods | Improve this Doc View Source MapTo<T>(DataRow, Boolean) Declaration public static T MapTo<T>(this DataRow row, bool useAttributeName = true) where T : class Parameters Type Name Description DataRow row Boolean useAttributeName if true when mapping datarow columns to T instance. Attribute mapto name will be used instead of property name if exist Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source MapToList<T>(DataTable, Boolean) Declaration public static List<T> MapToList<T>(this DataTable dataTable, bool useAttributeName = true) where T : class Parameters Type Name Description DataTable dataTable Boolean useAttributeName Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source SetColumnPosition(DataTable, String, Int32) SetOrdinal of DataTable columns based on the index of the columnNames array. Removes invalid column names first. Declaration public static bool SetColumnPosition(this DataTable table, string columnName, int position) Parameters Type Name Description DataTable table String columnName Int32 position Returns Type Description Boolean Remarks http://stackoverflow.com/questions/3757997/how-to-change-datatable-colums-order | Improve this Doc View Source SetColumnsOrder(DataTable, String[]) SetOrdinal of DataTable columns based on the index of the columnNames array. Removes invalid column names first. Declaration public static void SetColumnsOrder(this DataTable table, params string[] columnNames) Parameters Type Name Description DataTable table String [] columnNames Remarks http://stackoverflow.com/questions/3757997/how-to-change-datatable-colums-order"
  },
  "api/DotNetHelper.Database.Models.html": {
    "href": "api/DotNetHelper.Database.Models.html",
    "title": "Namespace DotNetHelper.Database.Models | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database.Models Classes FullQueryBucketEventArgs QueryBucket QueryBucketEventArgs QueryBucketManager Delegates QueryBucketManager.FullQueryBucketEventHandler QueryBucketManager.OnBeforeAddToBucketEventHandler"
  },
  "api/DotNetHelper.Database.Extension.IDataParameterExtension.html": {
    "href": "api/DotNetHelper.Database.Extension.IDataParameterExtension.html",
    "title": "Class IDataParameterExtension | DotNetHelper.Database",
    "keywords": "Class IDataParameterExtension Inheritance Object IDataParameterExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Extension Assembly : DotNetHelper.Database.dll Syntax public static class IDataParameterExtension Methods | Improve this Doc View Source AddRange<T>(IDataParameterCollection, IEnumerable<T>) Declaration public static void AddRange<T>(this IDataParameterCollection collection, IEnumerable<T> collectionToAdd) Parameters Type Name Description IDataParameterCollection collection IEnumerable <T> collectionToAdd Type Parameters Name Description T"
  },
  "api/DotNetHelper.Database.Interface.IColumnSerializer.html": {
    "href": "api/DotNetHelper.Database.Interface.IColumnSerializer.html",
    "title": "Interface IColumnSerializer | DotNetHelper.Database",
    "keywords": "Interface IColumnSerializer Namespace : DotNetHelper.Database.Interface Assembly : DotNetHelper.Database.dll Syntax public interface IColumnSerializer Properties | Improve this Doc View Source Deserialize Declaration Func<object, string> Deserialize { get; } Property Value Type Description Func < Object , String > | Improve this Doc View Source Serialize Declaration Func<object, string> Serialize { get; } Property Value Type Description Func < Object , String >"
  },
  "api/DotNetHelper.Database.Models.QueryBucketEventArgs.html": {
    "href": "api/DotNetHelper.Database.Models.QueryBucketEventArgs.html",
    "title": "Class QueryBucketEventArgs | DotNetHelper.Database",
    "keywords": "Class QueryBucketEventArgs Inheritance Object EventArgs QueryBucketEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Models Assembly : DotNetHelper.Database.dll Syntax public class QueryBucketEventArgs : EventArgs Constructors | Improve this Doc View Source QueryBucketEventArgs(QueryBucket) Declaration public QueryBucketEventArgs(QueryBucket bucket) Parameters Type Name Description QueryBucket bucket Properties | Improve this Doc View Source QueryBucket Declaration public QueryBucket QueryBucket { get; } Property Value Type Description QueryBucket"
  },
  "api/DotNetHelper.Database.Extension.html": {
    "href": "api/DotNetHelper.Database.Extension.html",
    "title": "Namespace DotNetHelper.Database.Extension | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database.Extension Classes DBConnectionExtension ExtDataReader ExtDataTable IDataParameterExtension TypeExtension"
  },
  "api/DotNetHelper.Database.Models.FullQueryBucketEventArgs.html": {
    "href": "api/DotNetHelper.Database.Models.FullQueryBucketEventArgs.html",
    "title": "Class FullQueryBucketEventArgs | DotNetHelper.Database",
    "keywords": "Class FullQueryBucketEventArgs Inheritance Object EventArgs FullQueryBucketEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Models Assembly : DotNetHelper.Database.dll Syntax public class FullQueryBucketEventArgs : EventArgs Constructors | Improve this Doc View Source FullQueryBucketEventArgs(List<QueryBucket>) Declaration public FullQueryBucketEventArgs(List<QueryBucket> buckets) Parameters Type Name Description List < QueryBucket > buckets Properties | Improve this Doc View Source BucketOfQueries Declaration public List<QueryBucket> BucketOfQueries { get; } Property Value Type Description List < QueryBucket >"
  },
  "api/DotNetHelper.Database.Models.QueryBucket.html": {
    "href": "api/DotNetHelper.Database.Models.QueryBucket.html",
    "title": "Class QueryBucket | DotNetHelper.Database",
    "keywords": "Class QueryBucket Inheritance Object QueryBucket Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Models Assembly : DotNetHelper.Database.dll Syntax public class QueryBucket Properties | Improve this Doc View Source ConnectionDisposeTime Declaration public DateTime? ConnectionDisposeTime { get; set; } Property Value Type Description Nullable < DateTime > | Improve this Doc View Source ConnectionStartTime Declaration public DateTime ConnectionStartTime { get; set; } Property Value Type Description DateTime | Improve this Doc View Source DatabaseType Declaration public string DatabaseType { get; set; } Property Value Type Description String | Improve this Doc View Source ExecutedSuccessfully Declaration public bool? ExecutedSuccessfully { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source Query Declaration public string Query { get; set; } Property Value Type Description String | Improve this Doc View Source ReadableQuery Declaration public string ReadableQuery { get; set; } Property Value Type Description String | Improve this Doc View Source Server Declaration public string Server { get; set; } Property Value Type Description String"
  },
  "api/DotNetHelper.Database.Models.QueryBucketManager.OnBeforeAddToBucketEventHandler.html": {
    "href": "api/DotNetHelper.Database.Models.QueryBucketManager.OnBeforeAddToBucketEventHandler.html",
    "title": "Delegate QueryBucketManager.OnBeforeAddToBucketEventHandler | DotNetHelper.Database",
    "keywords": "Delegate QueryBucketManager.OnBeforeAddToBucketEventHandler Namespace : DotNetHelper.Database.Models Assembly : DotNetHelper.Database.dll Syntax public delegate void OnBeforeAddToBucketEventHandler(object sender, QueryBucketEventArgs e); Parameters Type Name Description Object sender QueryBucketEventArgs e"
  },
  "api/DotNetHelper.Database.Helper.html": {
    "href": "api/DotNetHelper.Database.Helper.html",
    "title": "Namespace DotNetHelper.Database.Helper | DotNetHelper.Database",
    "keywords": "Namespace DotNetHelper.Database.Helper Classes DBProviderHelper"
  },
  "api/DotNetHelper.Database.Extension.ExtDataReader.html": {
    "href": "api/DotNetHelper.Database.Extension.ExtDataReader.html",
    "title": "Class ExtDataReader | DotNetHelper.Database",
    "keywords": "Class ExtDataReader Inheritance Object ExtDataReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Database.Extension Assembly : DotNetHelper.Database.dll Syntax public static class ExtDataReader Methods | Improve this Doc View Source HasRows(IDataReader) Declaration public static bool? HasRows(this IDataReader reader) Parameters Type Name Description IDataReader reader Returns Type Description Nullable < Boolean > | Improve this Doc View Source MapTo<T>(IDataReader) Declaration public static T MapTo<T>(this IDataReader reader) where T : class Parameters Type Name Description IDataReader reader Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source MapTo<T>(IDataReader, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>) Declaration public static T MapTo<T>(this IDataReader reader, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer) where T : class Parameters Type Name Description IDataReader reader Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source MapToDataTable<T>(IEnumerable<T>) Declaration public static DataTable MapToDataTable<T>(this IEnumerable<T> source) where T : class Parameters Type Name Description IEnumerable <T> source Returns Type Description DataTable Type Parameters Name Description T | Improve this Doc View Source MapToList<T>(IDataReader) Maps the IDataReder to a list of T Declaration public static List<T> MapToList<T>(this IDataReader reader) where T : class Parameters Type Name Description IDataReader reader Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source MapToList<T>(IDataReader, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>) Declaration public static List<T> MapToList<T>(this IDataReader reader, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer) where T : class Parameters Type Name Description IDataReader reader Func < String , Type , Object > xmlDeserializer Func < String , Type , Object > jsonDeserializer Func < String , Type , Object > csvDeserializer Returns Type Description List <T> Type Parameters Name Description T"
  }
}