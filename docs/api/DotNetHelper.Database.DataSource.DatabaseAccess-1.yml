### YamlMime:ManagedReference
items:
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1
  commentId: T:DotNetHelper.Database.DataSource.DatabaseAccess`1
  id: DatabaseAccess`1
  parent: DotNetHelper.Database.DataSource
  children:
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.CanConnect
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.CommandTimeOut
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ConnectionString
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.DatabaseType
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose(System.Boolean)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable(System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo(System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema(System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewConnection(System.Boolean)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter(System.String,System.Object)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter``1(``0)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.ObjectToSql
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  - DotNetHelper.Database.DataSource.DatabaseAccess`1.UseSingleConnection
  langs:
  - csharp
  - vb
  name: DatabaseAccess<TDbConnection>
  nameWithType: DatabaseAccess<TDbConnection>
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>
  type: Class
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DatabaseAccess
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 21
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: 'public class DatabaseAccess<TDbConnection> : IDatabaseAccess, IDisposable where TDbConnection : DbConnection, new()'
    typeParameters:
    - id: TDbConnection
    content.vb: >-
      Public Class DatabaseAccess(Of TDbConnection As {DbConnection, New})
          Implements IDatabaseAccess, IDisposable
  inheritance:
  - System.Object
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DatabaseAccess(Of TDbConnection)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection)
  name.vb: DatabaseAccess(Of TDbConnection)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ConnectionString
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`1.ConnectionString
  id: ConnectionString
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: DatabaseAccess<TDbConnection>.ConnectionString
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ConnectionString
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ConnectionString
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 26
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe connection string to the database\n"
  example: []
  syntax:
    content: public string ConnectionString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ConnectionString As String
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ConnectionString*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionString
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ConnectionString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ConnectionString
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.CommandTimeOut
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`1.CommandTimeOut
  id: CommandTimeOut
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: CommandTimeOut
  nameWithType: DatabaseAccess<TDbConnection>.CommandTimeOut
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.CommandTimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CommandTimeOut
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 30
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe time in seconds to wait for the command to execute. The default is 30 seconds.\n"
  example: []
  syntax:
    content: public TimeSpan CommandTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property CommandTimeOut As TimeSpan
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.CommandTimeOut*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  nameWithType.vb: DatabaseAccess(Of TDbConnection).CommandTimeOut
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).CommandTimeOut
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ObjectToSql
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`1.ObjectToSql
  id: ObjectToSql
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ObjectToSql
  nameWithType: DatabaseAccess<TDbConnection>.ObjectToSql
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ObjectToSql
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ObjectToSql
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 41
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe service that is used to generate sql\n"
  example: []
  syntax:
    content: public ObjectToSql ObjectToSql { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Services.ObjectToSql
    content.vb: Public ReadOnly Property ObjectToSql As ObjectToSql
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ObjectToSql*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ObjectToSql
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ObjectToSql
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.DatabaseType
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`1.DatabaseType
  id: DatabaseType
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: DatabaseAccess<TDbConnection>.DatabaseType
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.DatabaseType
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DatabaseType
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 45
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe type of database. This property is only used to control how sql is generated\n"
  example: []
  syntax:
    content: public DataBaseType DatabaseType { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public ReadOnly Property DatabaseType As DataBaseType
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.DatabaseType*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  nameWithType.vb: DatabaseAccess(Of TDbConnection).DatabaseType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).DatabaseType
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.UseSingleConnection
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`1.UseSingleConnection
  id: UseSingleConnection
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: UseSingleConnection
  nameWithType: DatabaseAccess<TDbConnection>.UseSingleConnection
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.UseSingleConnection
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: UseSingleConnection
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 49
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public bool UseSingleConnection { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property UseSingleConnection As Boolean
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.UseSingleConnection*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).UseSingleConnection
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).UseSingleConnection
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: DatabaseAccess(String)
  nameWithType: DatabaseAccess<TDbConnection>.DatabaseAccess(String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.DatabaseAccess(System.String)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 66
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nInitialize a new DatabaseAccess. \n"
  example: []
  syntax:
    content: public DatabaseAccess(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
    content.vb: Public Sub New(connectionString As String)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).DatabaseAccess(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).DatabaseAccess(System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: DatabaseAccess(DataBaseType, String)
  nameWithType: DatabaseAccess<TDbConnection>.DatabaseAccess(DataBaseType, String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 97
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\n\n"
  example: []
  syntax:
    content: public DatabaseAccess(DataBaseType type, string connectionString)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
      description: ''
    - id: connectionString
      type: System.String
      description: ''
    content.vb: Public Sub New(type As DataBaseType, connectionString As String)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).DatabaseAccess(DataBaseType, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: DatabaseAccess(DataBaseType, String, TimeSpan)
  nameWithType: DatabaseAccess<TDbConnection>.DatabaseAccess(DataBaseType, String, TimeSpan)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 109
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\n\n"
  example: []
  syntax:
    content: public DatabaseAccess(DataBaseType type, string connectionString, TimeSpan commandTimeOut)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
      description: ''
    - id: connectionString
      type: System.String
      description: ''
    - id: commandTimeOut
      type: System.TimeSpan
      description: ''
    content.vb: Public Sub New(type As DataBaseType, connectionString As String, commandTimeOut As TimeSpan)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).DatabaseAccess(DataBaseType, String, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String, System.TimeSpan)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewConnection(System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewConnection(System.Boolean)
  id: GetNewConnection(System.Boolean)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetNewConnection(Boolean)
  nameWithType: DatabaseAccess<TDbConnection>.GetNewConnection(Boolean)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewConnection(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewConnection
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 139
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\ncreates a new connection object\n"
  example: []
  syntax:
    content: public TDbConnection GetNewConnection(bool openConnection)
    parameters:
    - id: openConnection
      type: System.Boolean
      description: ''
    return:
      type: '{TDbConnection}'
      description: ''
    content.vb: Public Function GetNewConnection(openConnection As Boolean) As TDbConnection
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewConnection*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewConnection(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewConnection(System.Boolean)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter(System.String,System.Object)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter(System.String,System.Object)
  id: GetNewParameter(System.String,System.Object)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetNewParameter(String, Object)
  nameWithType: DatabaseAccess<TDbConnection>.GetNewParameter(String, Object)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 163
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a new instance of DBParameter  \n"
  example: []
  syntax:
    content: public DbParameter GetNewParameter(string parameterName, object value)
    parameters:
    - id: parameterName
      type: System.String
      description: ''
    - id: value
      type: System.Object
      description: ''
    return:
      type: System.Data.Common.DbParameter
      description: ''
    content.vb: Public Function GetNewParameter(parameterName As String, value As Object) As DbParameter
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(System.String,System.Object)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewParameter(String, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewParameter(System.String, System.Object)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter``1(``0)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter``1(``0)
  id: GetNewParameter``1(``0)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetNewParameter<T>(T)
  nameWithType: DatabaseAccess<TDbConnection>.GetNewParameter<T>(T)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewParameter<T>(T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 178
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<DbParameter> GetNewParameter<T>(T obj)
          where T : class
    parameters:
    - id: obj
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    content.vb: Public Function GetNewParameter(Of T As Class)(obj As T) As List(Of DbParameter)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1({T})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewParameter(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewParameter(Of T)(T)
  name.vb: GetNewParameter(Of T)(T)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DatabaseAccess<TDbConnection>.GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewParameter<T>(T, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 192
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<DbParameter> GetNewParameter<T>(T obj, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)
          where T : class
    parameters:
    - id: obj
      type: '{T}'
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    content.vb: Public Function GetNewParameter(Of T As Class)(obj As T, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As List(Of DbParameter)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1({T},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewParameter(Of T)(T, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  id: GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetNewCommand(DbConnection, String, CommandType, IEnumerable<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.GetNewCommand(DbConnection, String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewCommand(System.Data.Common.DbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommand
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 207
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\ncreates a new dbcommand from the connection\n"
  example: []
  syntax:
    content: public DbCommand GetNewCommand(DbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<DbParameter> parameters = null)
    parameters:
    - id: connection
      type: System.Data.Common.DbConnection
      description: ''
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function GetNewCommand(connection As DbConnection, sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of DbParameter) = Nothing) As DbCommand
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommand*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewCommand(DbConnection, String, CommandType, IEnumerable(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewCommand(System.Data.Common.DbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: GetNewCommand(DbConnection, String, CommandType, IEnumerable(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  id: GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetNewCommandAndTransaction(DbConnection)
  nameWithType: DatabaseAccess<TDbConnection>.GetNewCommandAndTransaction(DbConnection)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommandAndTransaction
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 226
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\n\n"
  example: []
  syntax:
    content: public (DbCommand command, DbTransaction transaction)GetNewCommandAndTransaction(DbConnection connection)
    parameters:
    - id: connection
      type: System.Data.Common.DbConnection
      description: ''
    return:
      type: System.ValueTuple{System.Data.Common.DbCommand,System.Data.Common.DbTransaction}
      description: ''
    content.vb: Public Function GetNewCommandAndTransaction(connection As DbConnection) As(command As DbCommand, transaction As DbTransaction)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommandAndTransaction*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewCommandAndTransaction(DbConnection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewCommandAndTransaction(System.Data.Common.DbConnection)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  id: ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String, CommandType, IEnumerable<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteNonQuery(String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteNonQuery
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 248
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecute an SQL Command and returns the number of rows affected\n"
  example: []
  syntax:
    content: public int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteNonQuery(sql As String, commandType As CommandType, parameters As IEnumerable(Of DbParameter) = Nothing) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
  see:
  - linkId: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
    commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteNonQuery(String, CommandType, IEnumerable(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  id: ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(TDbConnection, String, CommandType, IEnumerable<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteNonQuery(TDbConnection, String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteNonQuery(TDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteNonQuery
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 265
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecute an SQL Command against the specified <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TDbConnection</code>  and returns the number of rows affected\n"
  example: []
  syntax:
    content: public int ExecuteNonQuery(TDbConnection connection, string sql, CommandType commandType, IEnumerable<DbParameter> parameters = null)
    parameters:
    - id: connection
      type: '{TDbConnection}'
      description: ''
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteNonQuery(connection As TDbConnection, sql As String, commandType As CommandType, parameters As IEnumerable(Of DbParameter) = Nothing) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteNonQuery(TDbConnection, String, CommandType, IEnumerable(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteNonQuery(TDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: ExecuteNonQuery(TDbConnection, String, CommandType, IEnumerable(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteScalar
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 279
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and return the 1st column of the 1st row as an object\n"
  example: []
  syntax:
    content: public object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Public Function ExecuteScalar(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As Object
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteScalar*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteScalar(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  id: ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransaction
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 312
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes a list of sql as in a single transaction \n"
  example: []
  syntax:
    content: public int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.String}
      description: ''
    - id: rollbackOnException
      type: System.Boolean
      description: ''
    - id: throwException
      type: System.Boolean
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteTransaction(sqls As List(Of String), rollbackOnException As Boolean, throwException As Boolean = True) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteTransaction*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteTransaction(List(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataReader(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataReader(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataReader
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 406
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nexecute the sql and return the result as a DbDataReader\n"
  example: []
  syntax:
    content: public DbDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.Common.DbDataReader
      description: ''
    content.vb: Public Function GetDataReader(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DbDataReader
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataReader*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataReader(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 421
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: public DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTable(selectSql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTable(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable(System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable(System.String)
  id: GetDataTable(System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataTable(String)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTable(String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTable(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 434
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: public DataTable GetDataTable(string selectSql)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTable(selectSql As String) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTable(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTable(System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 446
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithSchema(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 468
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithKeyInfo(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema(System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema(System.String)
  id: GetDataTableWithSchema(System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTableWithSchema(String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTableWithSchema(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 486
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithSchema(sql As String) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTableWithSchema(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTableWithSchema(System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo(System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo(System.String)
  id: GetDataTableWithKeyInfo(System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String)
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTableWithKeyInfo(String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTableWithKeyInfo(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 496
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better proformance\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithKeyInfo(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithKeyInfo(sql As String) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTableWithKeyInfo(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTableWithKeyInfo(System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.CanConnect
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.CanConnect
  id: CanConnect
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: CanConnect()
  nameWithType: DatabaseAccess<TDbConnection>.CanConnect()
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.CanConnect()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CanConnect
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 506
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nAttempts to open a connection to the database using the connection string provided in the constructor. \n"
  example: []
  syntax:
    content: public bool CanConnect()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function CanConnect As Boolean
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.CanConnect*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  nameWithType.vb: DatabaseAccess(Of TDbConnection).CanConnect()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).CanConnect()
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Get<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 532
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the specified sql and maps the results a list of objects\n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: 'The sql result mapped to a list of '
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1
  id: Get``1
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Get<T>()
  nameWithType: DatabaseAccess<TDbConnection>.Get<T>()
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Get<T>()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 559
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a list of type of T from the database. \n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>()
          where T : class
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function Get(Of T As Class) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Get(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Get(Of T)()
  name.vb: Get(Of T)()
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  id: Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: DatabaseAccess<TDbConnection>.Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Get<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 574
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a list of type of T from the database. \n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer)
          where T : class
    parameters:
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function Get(Of T As Class)(xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object)) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Get(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<TDbConnection>.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 588
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and map the results to a list of type of T\n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Get(Of T)(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType)
  nameWithType: DatabaseAccess<TDbConnection>.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 600
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: the object to create sql from
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: '# of rows affected'
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Execute(Of T)(T, ActionType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String)
  nameWithType: DatabaseAccess<TDbConnection>.Execute<T>(T, ActionType, String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 613
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Execute(Of T)(T, ActionType, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  name.vb: Execute(Of T)(T, ActionType, String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DatabaseAccess<TDbConnection>.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 629
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<TDbConnection>.Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 649
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, params Expression<Func<T, object>>[] keyFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: keyFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, ParamArray keyFields As Expression(Of Func(Of T, Object))()) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<TDbConnection>.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 669
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] keyFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: keyFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: Override attributes and specified which properties are keys from an expression
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray keyFields As Expression(Of Func(Of T, Object))()) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 685
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and applies the reflected values to the instance provided. This is useful when dealing with identity fields  \n"
  example: []
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: 'the fields to return that will reflect the values after the sql is executed  '
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 704
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the sql and applies the reflected values tothe specified SQL from the object then executes t the instance provided. This is useful when dealing with identity fields  \n"
  example: []
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 716
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public DbDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.Common.DbDataReader
    content.vb: Public Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As DbDataReader
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 721
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public DbDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.Common.DbDataReader
    content.vb: Public Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As DbDataReader
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  id: SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopy
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 740
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public long SqlServerBulkCopy<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions)
          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int64
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopy(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions) As Long
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  id: SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopy
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 754
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public long SqlServerBulkCopy<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName)
          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int64
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopy(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String) As Long
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  id: SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopy
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 768
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public long SqlServerBulkCopy<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName, int batchSize)
          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    - id: batchSize
      type: System.Int32
      description: The integer value of the BatchSize property, or zero if no value has been set.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int64
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopy(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String, batchSize As Integer) As Long
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  id: SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopyAsync
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 800
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public Task<long> SqlServerBulkCopyAsync<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions)
          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopyAsync(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions) As Task(Of Long)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  id: SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopyAsync
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 814
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public Task<long> SqlServerBulkCopyAsync<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName)
          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopyAsync(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String) As Task(Of Long)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  id: SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopyAsync
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 828
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public Task<long> SqlServerBulkCopyAsync<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName, int batchSize)
          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    - id: batchSize
      type: System.Int32
      description: The integer value of the BatchSize property, or zero if no value has been set.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopyAsync(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String, batchSize As Integer) As Task(Of Long)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose
  id: Dispose
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DatabaseAccess<TDbConnection>.Dispose()
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Dispose()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Dispose
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 854
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Dispose()
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose(System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: DatabaseAccess<TDbConnection>.Dispose(Boolean)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
      branch: Feature-SingleSQLConnection
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Dispose
    path: ../src/DotNetHelper.Database/DataSource/DataBaseAccess.cs
    startLine: 861
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose*
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Dispose(System.Boolean)
references:
- uid: DotNetHelper.Database.DataSource
  commentId: N:DotNetHelper.Database.DataSource
  name: DotNetHelper.Database.DataSource
  nameWithType: DotNetHelper.Database.DataSource
  fullName: DotNetHelper.Database.DataSource
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DotNetHelper.Database.Interface.IDatabaseAccess
  commentId: T:DotNetHelper.Database.Interface.IDatabaseAccess
  parent: DotNetHelper.Database.Interface
  name: IDatabaseAccess
  nameWithType: IDatabaseAccess
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.Database.Interface
  commentId: N:DotNetHelper.Database.Interface
  name: DotNetHelper.Database.Interface
  nameWithType: DotNetHelper.Database.Interface
  fullName: DotNetHelper.Database.Interface
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ConnectionString*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ConnectionString
  name: ConnectionString
  nameWithType: DatabaseAccess<TDbConnection>.ConnectionString
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ConnectionString
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ConnectionString
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ConnectionString
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionString
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionString
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: ConnectionString
  nameWithType: IDatabaseAccess.ConnectionString
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.CommandTimeOut*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.CommandTimeOut
  name: CommandTimeOut
  nameWithType: DatabaseAccess<TDbConnection>.CommandTimeOut
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.CommandTimeOut
  nameWithType.vb: DatabaseAccess(Of TDbConnection).CommandTimeOut
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).CommandTimeOut
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: CommandTimeOut
  nameWithType: IDatabaseAccess.CommandTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ObjectToSql*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ObjectToSql
  name: ObjectToSql
  nameWithType: DatabaseAccess<TDbConnection>.ObjectToSql
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ObjectToSql
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ObjectToSql
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ObjectToSql
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: ObjectToSql
  nameWithType: IDatabaseAccess.ObjectToSql
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.Services.ObjectToSql
  parent: DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.Services.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services
  commentId: N:DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: DotNetHelper.ObjectToSql.Services
  nameWithType: DotNetHelper.ObjectToSql.Services
  fullName: DotNetHelper.ObjectToSql.Services
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.DatabaseType*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.DatabaseType
  name: DatabaseType
  nameWithType: DatabaseAccess<TDbConnection>.DatabaseType
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.DatabaseType
  nameWithType.vb: DatabaseAccess(Of TDbConnection).DatabaseType
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).DatabaseType
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: DatabaseType
  nameWithType: IDatabaseAccess.DatabaseType
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
- uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
  commentId: T:DotNetHelper.ObjectToSql.Enum.DataBaseType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
- uid: DotNetHelper.ObjectToSql.Enum
  commentId: N:DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DotNetHelper.ObjectToSql.Enum
  nameWithType: DotNetHelper.ObjectToSql.Enum
  fullName: DotNetHelper.ObjectToSql.Enum
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.UseSingleConnection*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.UseSingleConnection
  name: UseSingleConnection
  nameWithType: DatabaseAccess<TDbConnection>.UseSingleConnection
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.UseSingleConnection
  nameWithType.vb: DatabaseAccess(Of TDbConnection).UseSingleConnection
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).UseSingleConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.#ctor
  name: DatabaseAccess
  nameWithType: DatabaseAccess<TDbConnection>.DatabaseAccess
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.DatabaseAccess
  nameWithType.vb: DatabaseAccess(Of TDbConnection).DatabaseAccess
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).DatabaseAccess
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewConnection*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewConnection
  name: GetNewConnection
  nameWithType: DatabaseAccess<TDbConnection>.GetNewConnection
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewConnection
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewConnection
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewConnection
- uid: '{TDbConnection}'
  commentId: '!:TDbConnection'
  definition: TDbConnection
  name: TDbConnection
  nameWithType: TDbConnection
  fullName: TDbConnection
- uid: TDbConnection
  name: TDbConnection
  nameWithType: TDbConnection
  fullName: TDbConnection
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewParameter
  name: GetNewParameter
  nameWithType: DatabaseAccess<TDbConnection>.GetNewParameter
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewParameter
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewParameter
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewParameter
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(System.String,System.Object)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(System.String,System.Object)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetNewParameter(String, Object)
  nameWithType: IDatabaseAccess.GetNewParameter(String, Object)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(System.String, System.Object)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(System.String,System.Object)
    name: GetNewParameter
    nameWithType: IDatabaseAccess.GetNewParameter
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(System.String,System.Object)
    name: GetNewParameter
    nameWithType: IDatabaseAccess.GetNewParameter
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbParameter
  commentId: T:System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: true
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1({T})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
  name: GetNewParameter<T>(T)
  nameWithType: IDatabaseAccess.GetNewParameter<T>(T)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>(T)
  nameWithType.vb: IDatabaseAccess.GetNewParameter(Of T)(T)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)(T)
  name.vb: GetNewParameter(Of T)(T)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
    name: GetNewParameter<T>
    nameWithType: IDatabaseAccess.GetNewParameter<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
    name: GetNewParameter(Of T)
    nameWithType: IDatabaseAccess.GetNewParameter(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
  name: GetNewParameter<T>(T)
  nameWithType: IDatabaseAccess.GetNewParameter<T>(T)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>(T)
  nameWithType.vb: IDatabaseAccess.GetNewParameter(Of T)(T)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)(T)
  name.vb: GetNewParameter(Of T)(T)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
    name: GetNewParameter<T>
    nameWithType: IDatabaseAccess.GetNewParameter<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0)
    name: GetNewParameter(Of T)
    nameWithType: IDatabaseAccess.GetNewParameter(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1({T},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  name: GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>(T, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  nameWithType.vb: IDatabaseAccess.GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)(T, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: GetNewParameter<T>
    nameWithType: IDatabaseAccess.GetNewParameter<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: GetNewParameter(Of T)
    nameWithType: IDatabaseAccess.GetNewParameter(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object,System.String}
  commentId: T:System.Func{System.Object,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Object, String>
  nameWithType: Func<Object, String>
  fullName: System.Func<System.Object, System.String>
  nameWithType.vb: Func(Of Object, String)
  fullName.vb: System.Func(Of System.Object, System.String)
  name.vb: Func(Of Object, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  isExternal: true
  name: GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>(T, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  nameWithType.vb: IDatabaseAccess.GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)(T, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: GetNewParameter<T>
    nameWithType: IDatabaseAccess.GetNewParameter<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: GetNewParameter(Of T)
    nameWithType: IDatabaseAccess.GetNewParameter(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewParameter(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommand*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommand
  name: GetNewCommand
  nameWithType: DatabaseAccess<TDbConnection>.GetNewCommand
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewCommand
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewCommand
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewCommand
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetNewCommand(DbConnection, String, CommandType, IEnumerable<DbParameter>)
  nameWithType: IDatabaseAccess.GetNewCommand(DbConnection, String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetNewCommand(DbConnection, String, CommandType, IEnumerable(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: GetNewCommand(DbConnection, String, CommandType, IEnumerable(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
    name: GetNewCommand
    nameWithType: IDatabaseAccess.GetNewCommand
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbConnection
    name: DbConnection
    nameWithType: DbConnection
    fullName: System.Data.Common.DbConnection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
    name: GetNewCommand
    nameWithType: IDatabaseAccess.GetNewCommand
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbConnection
    name: DbConnection
    nameWithType: DbConnection
    fullName: System.Data.Common.DbConnection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbConnection
  commentId: T:System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: true
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DbParameter>
  nameWithType: IEnumerable<DbParameter>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>
  nameWithType.vb: IEnumerable(Of DbParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter)
  name.vb: IEnumerable(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbCommand
  commentId: T:System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: true
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommandAndTransaction*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetNewCommandAndTransaction
  name: GetNewCommandAndTransaction
  nameWithType: DatabaseAccess<TDbConnection>.GetNewCommandAndTransaction
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetNewCommandAndTransaction
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetNewCommandAndTransaction
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetNewCommandAndTransaction
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetNewCommandAndTransaction(DbConnection)
  nameWithType: IDatabaseAccess.GetNewCommandAndTransaction(DbConnection)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
    name: GetNewCommandAndTransaction
    nameWithType: IDatabaseAccess.GetNewCommandAndTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbConnection
    name: DbConnection
    nameWithType: DbConnection
    fullName: System.Data.Common.DbConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.Common.DbConnection)
    name: GetNewCommandAndTransaction
    nameWithType: IDatabaseAccess.GetNewCommandAndTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbConnection
    name: DbConnection
    nameWithType: DbConnection
    fullName: System.Data.Common.DbConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Data.Common.DbCommand,System.Data.Common.DbTransaction}
  commentId: T:System.ValueTuple{System.Data.Common.DbCommand,System.Data.Common.DbTransaction}
  parent: System
  isExternal: true
  name: ValueTuple<DbCommand, DbTransaction>
  nameWithType: ValueTuple<DbCommand, DbTransaction>
  fullName: System.ValueTuple<System.Data.Common.DbCommand, System.Data.Common.DbTransaction>
  nameWithType.vb: ValueTuple(Of DbCommand, DbTransaction)
  fullName.vb: System.ValueTuple(Of System.Data.Common.DbCommand, System.Data.Common.DbTransaction)
  name.vb: ValueTuple(Of DbCommand, DbTransaction)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbCommand
    name: DbCommand
    nameWithType: DbCommand
    fullName: System.Data.Common.DbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbTransaction
    name: DbTransaction
    nameWithType: DbTransaction
    fullName: System.Data.Common.DbTransaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbCommand
    name: DbCommand
    nameWithType: DbCommand
    fullName: System.Data.Common.DbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbTransaction
    name: DbTransaction
    nameWithType: DbTransaction
    fullName: System.Data.Common.DbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteNonQuery
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteNonQuery
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteNonQuery
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteNonQuery
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: ExecuteNonQuery(String, CommandType, IEnumerable<DbParameter>)
  nameWithType: IDatabaseAccess.ExecuteNonQuery(String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.ExecuteNonQuery(String, CommandType, IEnumerable(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
    name: ExecuteNonQuery
    nameWithType: IDatabaseAccess.ExecuteNonQuery
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
    name: ExecuteNonQuery
    nameWithType: IDatabaseAccess.ExecuteNonQuery
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteScalar*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteScalar
  name: ExecuteScalar
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteScalar
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteScalar
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteScalar
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteScalar
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.ExecuteScalar(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: ExecuteScalar
    nameWithType: IDatabaseAccess.ExecuteScalar
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: ExecuteScalar
    nameWithType: IDatabaseAccess.ExecuteScalar
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteTransaction*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteTransaction
  name: ExecuteTransaction
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteTransaction
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteTransaction
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteTransaction
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteTransaction
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: IDatabaseAccess.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  nameWithType.vb: IDatabaseAccess.ExecuteTransaction(List(Of String), Boolean, Boolean)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
    name: ExecuteTransaction
    nameWithType: IDatabaseAccess.ExecuteTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
    name: ExecuteTransaction
    nameWithType: IDatabaseAccess.ExecuteTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataReader*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataReader
  name: GetDataReader
  nameWithType: DatabaseAccess<TDbConnection>.GetDataReader
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataReader
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataReader
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataReader
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataReader(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataReader(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataReader(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataReader
    nameWithType: IDatabaseAccess.GetDataReader
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataReader
    nameWithType: IDatabaseAccess.GetDataReader
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTable
  name: GetDataTable
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTable
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTable
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTable
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTable
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataTable(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTable(String)
  nameWithType: IDatabaseAccess.GetDataTable(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithSchema
  name: GetDataTableWithSchema
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTableWithSchema
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTableWithSchema
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTableWithSchema
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTableWithSchema
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.GetDataTableWithKeyInfo
  name: GetDataTableWithKeyInfo
  nameWithType: DatabaseAccess<TDbConnection>.GetDataTableWithKeyInfo
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.GetDataTableWithKeyInfo
  nameWithType.vb: DatabaseAccess(Of TDbConnection).GetDataTableWithKeyInfo
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).GetDataTableWithKeyInfo
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithSchema(String)
  nameWithType: IDatabaseAccess.GetDataTableWithSchema(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithKeyInfo(String)
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.CanConnect*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.CanConnect
  name: CanConnect
  nameWithType: DatabaseAccess<TDbConnection>.CanConnect
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.CanConnect
  nameWithType.vb: DatabaseAccess(Of TDbConnection).CanConnect
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).CanConnect
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: CanConnect()
  nameWithType: IDatabaseAccess.CanConnect()
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect()
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
    name: CanConnect
    nameWithType: IDatabaseAccess.CanConnect
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
    name: CanConnect
    nameWithType: IDatabaseAccess.CanConnect
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Get*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.Get
  name: Get
  nameWithType: DatabaseAccess<TDbConnection>.Get
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Get
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Get
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Get
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: IDatabaseAccess.Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.String,System.Type,System.Object}
  commentId: T:System.Func{System.String,System.Type,System.Object}
  parent: System
  definition: System.Func`3
  name: Func<String, Type, Object>
  nameWithType: Func<String, Type, Object>
  fullName: System.Func<System.String, System.Type, System.Object>
  nameWithType.vb: Func(Of String, Type, Object)
  fullName.vb: System.Func(Of System.String, System.Type, System.Object)
  name.vb: Func(Of String, Type, Object)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: Get<T>()
  nameWithType: IDatabaseAccess.Get<T>()
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>()
  nameWithType.vb: IDatabaseAccess.Get(Of T)()
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)()
  name.vb: Get(Of T)()
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: IDatabaseAccess.Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  nameWithType.vb: IDatabaseAccess.Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.Get(Of T)(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.Execute
  name: Execute
  nameWithType: DatabaseAccess<TDbConnection>.Execute
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Execute
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Execute
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Execute
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  name: Execute<T>(T, ActionType)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.ObjectToSql.Enum.ActionType
  commentId: T:DotNetHelper.ObjectToSql.Enum.ActionType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper.ObjectToSql.Enum.ActionType
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  isExternal: true
  name: Execute<T>(T, ActionType)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  name: Execute<T>(T, ActionType, String)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  name.vb: Execute(Of T)(T, ActionType, String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  isExternal: true
  name: Execute<T>(T, ActionType, String)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  name.vb: Execute(Of T)(T, ActionType, String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  isExternal: true
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutput
  name: ExecuteAndGetOutput
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteAndGetOutput
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteAndGetOutput
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteAndGetOutput
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteAndGetOutput
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.ExecuteAndGetOutputAsDataReader
  name: ExecuteAndGetOutputAsDataReader
  nameWithType: DatabaseAccess<TDbConnection>.ExecuteAndGetOutputAsDataReader
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.ExecuteAndGetOutputAsDataReader
  nameWithType.vb: DatabaseAccess(Of TDbConnection).ExecuteAndGetOutputAsDataReader
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).ExecuteAndGetOutputAsDataReader
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopy
  name: SqlServerBulkCopy
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopy
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopy
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopy
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopy
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopy<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopy(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopy(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  commentId: T:System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  isExternal: true
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopy<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopy(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopy(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.SqlClient
  commentId: N:System.Data.SqlClient
  isExternal: true
  name: System.Data.SqlClient
  nameWithType: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopy<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopy(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopy(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  isExternal: true
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopy<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopy(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopy(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopy<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopy(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopy(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  isExternal: true
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopy<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopy<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopy(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopy(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.SqlServerBulkCopyAsync
  name: SqlServerBulkCopyAsync
  nameWithType: DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.SqlServerBulkCopyAsync
  nameWithType.vb: DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).SqlServerBulkCopyAsync
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopyAsync<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopyAsync(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  isExternal: true
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopyAsync<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
    name: SqlServerBulkCopyAsync(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopyAsync<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopyAsync(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  isExternal: true
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopyAsync<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
    name: SqlServerBulkCopyAsync(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{{T}},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopyAsync<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopyAsync(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  isExternal: true
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  nameWithType.vb: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopyAsync<T>
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
    name: SqlServerBulkCopyAsync(Of T)
    nameWithType: IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlServerBulkCopyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.SqlClient.SqlBulkCopyOptions
    name: SqlBulkCopyOptions
    nameWithType: SqlBulkCopyOptions
    fullName: System.Data.SqlClient.SqlBulkCopyOptions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`1.Dispose
  name: Dispose
  nameWithType: DatabaseAccess<TDbConnection>.Dispose
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<TDbConnection>.Dispose
  nameWithType.vb: DatabaseAccess(Of TDbConnection).Dispose
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of TDbConnection).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
