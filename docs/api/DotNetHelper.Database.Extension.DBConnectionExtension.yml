### YamlMime:ManagedReference
items:
- uid: DotNetHelper.Database.Extension.DbConnectionExtension
  commentId: T:DotNetHelper.Database.Extension.DbConnectionExtension
  id: DbConnectionExtension
  parent: DotNetHelper.Database.Extension
  children:
  - DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely(System.Data.IDbConnection)
  - DotNetHelper.Database.Extension.DbConnectionExtension.DB``1(``0)
  - DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql``1(``0,System.Boolean)
  - DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely(System.Data.IDbConnection)
  - DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: DbConnectionExtension
  nameWithType: DbConnectionExtension
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension
  type: Class
  source:
    remote:
      path: src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DbConnectionExtension
    path: ../src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
    startLine: 12
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Extension
  syntax:
    content: public static class DbConnectionExtension
    content.vb: Public Module DbConnectionExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql``1(``0,System.Boolean)
  commentId: M:DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql``1(``0,System.Boolean)
  id: ObjToSql``1(``0,System.Boolean)
  isExtensionMethod: true
  parent: DotNetHelper.Database.Extension.DbConnectionExtension
  langs:
  - csharp
  - vb
  name: ObjToSql<T>(T, Boolean)
  nameWithType: DbConnectionExtension.ObjToSql<T>(T, Boolean)
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql<T>(T, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ObjToSql
    path: ../src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
    startLine: 15
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Extension
  syntax:
    content: >-
      public static ObjectToSql ObjToSql<T>(this T dbConnection, bool includeNonPublicProperties = true)

          where T : DbConnection
    parameters:
    - id: dbConnection
      type: '{T}'
    - id: includeNonPublicProperties
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: DotNetHelper.ObjectToSql.Services.ObjectToSql
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjToSql(Of T As DbConnection)(dbConnection As T, includeNonPublicProperties As Boolean = True) As ObjectToSql
  overload: DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql*
  nameWithType.vb: DbConnectionExtension.ObjToSql(Of T)(T, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql(Of T)(T, System.Boolean)
  name.vb: ObjToSql(Of T)(T, Boolean)
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.DB``1(``0)
  commentId: M:DotNetHelper.Database.Extension.DbConnectionExtension.DB``1(``0)
  id: DB``1(``0)
  isExtensionMethod: true
  parent: DotNetHelper.Database.Extension.DbConnectionExtension
  langs:
  - csharp
  - vb
  name: DB<T>(T)
  nameWithType: DbConnectionExtension.DB<T>(T)
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.DB<T>(T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DB
    path: ../src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
    startLine: 20
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Extension
  syntax:
    content: >-
      public static DB<T> DB<T>(this T dbConnection)

          where T : DbConnection, new()
    parameters:
    - id: dbConnection
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: DotNetHelper.Database.DataSource.DB{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DB(Of T As {DbConnection, New})(dbConnection As T) As DB(Of T)
  overload: DotNetHelper.Database.Extension.DbConnectionExtension.DB*
  nameWithType.vb: DbConnectionExtension.DB(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper.Database.Extension.DbConnectionExtension.DB(Of T)(T)
  name.vb: DB(Of T)(T)
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely(System.Data.IDbConnection)
  commentId: M:DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely(System.Data.IDbConnection)
  id: OpenSafely(System.Data.IDbConnection)
  isExtensionMethod: true
  parent: DotNetHelper.Database.Extension.DbConnectionExtension
  langs:
  - csharp
  - vb
  name: OpenSafely(IDbConnection)
  nameWithType: DbConnectionExtension.OpenSafely(IDbConnection)
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely(System.Data.IDbConnection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: OpenSafely
    path: ../src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
    startLine: 30
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Extension
  summary: "\n\n"
  example: []
  syntax:
    content: public static bool OpenSafely(this IDbConnection connection)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: ''
    return:
      type: System.Boolean
      description: true if the connection was force to be opened false if connection was already open
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OpenSafely(connection As IDbConnection) As Boolean
  overload: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely(System.Data.IDbConnection)
  commentId: M:DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely(System.Data.IDbConnection)
  id: CloseSafely(System.Data.IDbConnection)
  isExtensionMethod: true
  parent: DotNetHelper.Database.Extension.DbConnectionExtension
  langs:
  - csharp
  - vb
  name: CloseSafely(IDbConnection)
  nameWithType: DbConnectionExtension.CloseSafely(IDbConnection)
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely(System.Data.IDbConnection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CloseSafely
    path: ../src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
    startLine: 44
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Extension
  syntax:
    content: public static void CloseSafely(this IDbConnection connection)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CloseSafely(connection As IDbConnection)
  overload: DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  commentId: M:DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  id: OpenSafelyAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: DotNetHelper.Database.Extension.DbConnectionExtension
  langs:
  - csharp
  - vb
  name: OpenSafelyAsync(DbConnection, CancellationToken)
  nameWithType: DbConnectionExtension.OpenSafelyAsync(DbConnection, CancellationToken)
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync(System.Data.Common.DbConnection, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: OpenSafelyAsync
    path: ../src/DotNetHelper.Database/Extension/IDBConnectionExtension.cs
    startLine: 61
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Extension
  summary: "\n\n"
  example: []
  syntax:
    content: public static Task<bool> OpenSafelyAsync(this DbConnection connection, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: connection
      type: System.Data.Common.DbConnection
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true if the connection was force to be opened false if connection was already open
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OpenSafelyAsync(connection As DbConnection, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DotNetHelper.Database.Extension
  commentId: N:DotNetHelper.Database.Extension
  name: DotNetHelper.Database.Extension
  nameWithType: DotNetHelper.Database.Extension
  fullName: DotNetHelper.Database.Extension
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql*
  commentId: Overload:DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql
  name: ObjToSql
  nameWithType: DbConnectionExtension.ObjToSql
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.ObjToSql
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper.ObjectToSql.Services.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.Services.ObjectToSql
  parent: DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.Services.ObjectToSql
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: DotNetHelper.ObjectToSql.Services
  commentId: N:DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: DotNetHelper.ObjectToSql.Services
  nameWithType: DotNetHelper.ObjectToSql.Services
  fullName: DotNetHelper.ObjectToSql.Services
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.DB*
  commentId: Overload:DotNetHelper.Database.Extension.DbConnectionExtension.DB
  name: DB
  nameWithType: DbConnectionExtension.DB
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.DB
- uid: DotNetHelper.Database.DataSource.DB{{T}}
  commentId: T:DotNetHelper.Database.DataSource.DB{``0}
  parent: DotNetHelper.Database.DataSource
  definition: DotNetHelper.Database.DataSource.DB`1
  name: DB<T>
  nameWithType: DB<T>
  fullName: DotNetHelper.Database.DataSource.DB<T>
  nameWithType.vb: DB(Of T)
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of T)
  name.vb: DB(Of T)
  spec.csharp:
  - uid: DotNetHelper.Database.DataSource.DB`1
    name: DB
    nameWithType: DB
    fullName: DotNetHelper.Database.DataSource.DB
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DotNetHelper.Database.DataSource.DB`1
    name: DB
    nameWithType: DB
    fullName: DotNetHelper.Database.DataSource.DB
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1
  commentId: T:DotNetHelper.Database.DataSource.DB`1
  name: DB<TDbConnection>
  nameWithType: DB<TDbConnection>
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>
  nameWithType.vb: DB(Of TDbConnection)
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection)
  name.vb: DB(Of TDbConnection)
  spec.csharp:
  - uid: DotNetHelper.Database.DataSource.DB`1
    name: DB
    nameWithType: DB
    fullName: DotNetHelper.Database.DataSource.DB
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbConnection
    nameWithType: TDbConnection
    fullName: TDbConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DotNetHelper.Database.DataSource.DB`1
    name: DB
    nameWithType: DB
    fullName: DotNetHelper.Database.DataSource.DB
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbConnection
    nameWithType: TDbConnection
    fullName: TDbConnection
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource
  commentId: N:DotNetHelper.Database.DataSource
  name: DotNetHelper.Database.DataSource
  nameWithType: DotNetHelper.Database.DataSource
  fullName: DotNetHelper.Database.DataSource
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely*
  commentId: Overload:DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely
  name: OpenSafely
  nameWithType: DbConnectionExtension.OpenSafely
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafely
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely*
  commentId: Overload:DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely
  name: CloseSafely
  nameWithType: DbConnectionExtension.CloseSafely
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.CloseSafely
- uid: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync*
  commentId: Overload:DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync
  name: OpenSafelyAsync
  nameWithType: DbConnectionExtension.OpenSafelyAsync
  fullName: DotNetHelper.Database.Extension.DbConnectionExtension.OpenSafelyAsync
- uid: System.Data.Common.DbConnection
  commentId: T:System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: true
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
