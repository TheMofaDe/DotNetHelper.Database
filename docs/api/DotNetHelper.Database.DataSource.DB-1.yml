### YamlMime:ManagedReference
items:
- uid: DotNetHelper.Database.DataSource.DB`1
  commentId: T:DotNetHelper.Database.DataSource.DB`1
  id: DB`1
  parent: DotNetHelper.Database.DataSource
  children:
  - DotNetHelper.Database.DataSource.DB`1.#ctor(`0,System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType})
  - DotNetHelper.Database.DataSource.DB`1.CanConnect
  - DotNetHelper.Database.DataSource.DB`1.CanConnectAsync
  - DotNetHelper.Database.DataSource.DB`1.CommandTimeOut
  - DotNetHelper.Database.DataSource.DB`1.ConnectionString
  - DotNetHelper.Database.DataSource.DB`1.DatabaseType
  - DotNetHelper.Database.DataSource.DB`1.Dispose
  - DotNetHelper.Database.DataSource.DB`1.Dispose(System.Boolean)
  - DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  - DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DB`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DataSource.DB`1.Get``1
  - DotNetHelper.Database.DataSource.DB`1.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  - DotNetHelper.Database.DataSource.DB`1.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetAsync``1
  - DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  - DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  - DotNetHelper.Database.DataSource.DB`1.GetDataReaderAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  - DotNetHelper.Database.DataSource.DB`1.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfoAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchemaAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetNewCommand(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DB`1.GetNewCommandAndTransaction(`0)
  - DotNetHelper.Database.DataSource.DB`1.GetNewParameter(System.String,System.Object)
  - DotNetHelper.Database.DataSource.DB`1.GetNewParameter``1(``0)
  - DotNetHelper.Database.DataSource.DB`1.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DataSource.DB`1.ObjectToSql
  - DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  - DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  - DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  - DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  - DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  - DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: DB<TDbConnection>
  nameWithType: DB<TDbConnection>
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>
  type: Class
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DB
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 20
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: 'public class DB<TDbConnection> : IDisposable where TDbConnection : DbConnection'
    typeParameters:
    - id: TDbConnection
    content.vb: >-
      Public Class DB(Of TDbConnection As DbConnection)

          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DB(Of TDbConnection)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection)
  name.vb: DB(Of TDbConnection)
- uid: DotNetHelper.Database.DataSource.DB`1.ConnectionString
  commentId: P:DotNetHelper.Database.DataSource.DB`1.ConnectionString
  id: ConnectionString
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: DB<TDbConnection>.ConnectionString
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ConnectionString
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ConnectionString
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 25
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: >
    d

    The connection string to the database
  example: []
  syntax:
    content: public string ConnectionString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ConnectionString As String
  overload: DotNetHelper.Database.DataSource.DB`1.ConnectionString*
  nameWithType.vb: DB(Of TDbConnection).ConnectionString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ConnectionString
- uid: DotNetHelper.Database.DataSource.DB`1.CommandTimeOut
  commentId: P:DotNetHelper.Database.DataSource.DB`1.CommandTimeOut
  id: CommandTimeOut
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: CommandTimeOut
  nameWithType: DB<TDbConnection>.CommandTimeOut
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.CommandTimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CommandTimeOut
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 29
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe time in seconds to wait for the command to execute. The default is 30 seconds.\n"
  example: []
  syntax:
    content: public TimeSpan CommandTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property CommandTimeOut As TimeSpan
  overload: DotNetHelper.Database.DataSource.DB`1.CommandTimeOut*
  nameWithType.vb: DB(Of TDbConnection).CommandTimeOut
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).CommandTimeOut
- uid: DotNetHelper.Database.DataSource.DB`1.ObjectToSql
  commentId: P:DotNetHelper.Database.DataSource.DB`1.ObjectToSql
  id: ObjectToSql
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ObjectToSql
  nameWithType: DB<TDbConnection>.ObjectToSql
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ObjectToSql
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ObjectToSql
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 34
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe service that is used to generate sql\n"
  example: []
  syntax:
    content: public ObjectToSql ObjectToSql { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Services.ObjectToSql
    content.vb: Public ReadOnly Property ObjectToSql As ObjectToSql
  overload: DotNetHelper.Database.DataSource.DB`1.ObjectToSql*
  nameWithType.vb: DB(Of TDbConnection).ObjectToSql
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ObjectToSql
- uid: DotNetHelper.Database.DataSource.DB`1.DatabaseType
  commentId: P:DotNetHelper.Database.DataSource.DB`1.DatabaseType
  id: DatabaseType
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: DB<TDbConnection>.DatabaseType
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.DatabaseType
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DatabaseType
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 38
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nThe type of database. This property is only used to control how sql is generated\n"
  example: []
  syntax:
    content: public DataBaseType DatabaseType { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public ReadOnly Property DatabaseType As DataBaseType
  overload: DotNetHelper.Database.DataSource.DB`1.DatabaseType*
  nameWithType.vb: DB(Of TDbConnection).DatabaseType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).DatabaseType
- uid: DotNetHelper.Database.DataSource.DB`1.#ctor(`0,System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.#ctor(`0,System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType})
  id: '#ctor(`0,System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType})'
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: DB(TDbConnection, Nullable<DataBaseType>)
  nameWithType: DB<TDbConnection>.DB(TDbConnection, Nullable<DataBaseType>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.DB(TDbConnection, System.Nullable<DotNetHelper.ObjectToSql.Enum.DataBaseType>)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 54
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nInitialize a new DatabaseAccess. This method is internal to force users to use the extension method\n"
  example: []
  syntax:
    content: public DB(TDbConnection connection, DataBaseType? type = default(DataBaseType? ))
    parameters:
    - id: connection
      type: '{TDbConnection}'
      description: ''
    - id: type
      type: System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType}
      description: Specify how sql will be generated or it will be auto-determined based on DBConnection Type Name
    content.vb: Public Sub New(connection As TDbConnection, type As DataBaseType? = Nothing)
  overload: DotNetHelper.Database.DataSource.DB`1.#ctor*
  nameWithType.vb: DB(Of TDbConnection).DB(TDbConnection, Nullable(Of DataBaseType))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).DB(TDbConnection, System.Nullable(Of DotNetHelper.ObjectToSql.Enum.DataBaseType))
  name.vb: DB(TDbConnection, Nullable(Of DataBaseType))
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewParameter(System.String,System.Object)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetNewParameter(System.String,System.Object)
  id: GetNewParameter(System.String,System.Object)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetNewParameter(String, Object)
  nameWithType: DB<TDbConnection>.GetNewParameter(String, Object)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 84
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a new instance of DBParameter  \n"
  example: []
  syntax:
    content: public DbParameter GetNewParameter(string parameterName, object value)
    parameters:
    - id: parameterName
      type: System.String
      description: ''
    - id: value
      type: System.Object
      description: ''
    return:
      type: System.Data.Common.DbParameter
      description: ''
    content.vb: Public Function GetNewParameter(parameterName As String, value As Object) As DbParameter
  overload: DotNetHelper.Database.DataSource.DB`1.GetNewParameter*
  nameWithType.vb: DB(Of TDbConnection).GetNewParameter(String, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewParameter(System.String, System.Object)
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewParameter``1(``0)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetNewParameter``1(``0)
  id: GetNewParameter``1(``0)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetNewParameter<T>(T)
  nameWithType: DB<TDbConnection>.GetNewParameter<T>(T)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewParameter<T>(T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 99
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<DbParameter> GetNewParameter<T>(T obj)

          where T : class
    parameters:
    - id: obj
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    content.vb: Public Function GetNewParameter(Of T As Class)(obj As T) As List(Of DbParameter)
  overload: DotNetHelper.Database.DataSource.DB`1.GetNewParameter*
  nameWithType.vb: DB(Of TDbConnection).GetNewParameter(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewParameter(Of T)(T)
  name.vb: GetNewParameter(Of T)(T)
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: GetNewParameter``1(``0,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DB<TDbConnection>.GetNewParameter<T>(T, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewParameter<T>(T, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 113
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<DbParameter> GetNewParameter<T>(T obj, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)

          where T : class
    parameters:
    - id: obj
      type: '{T}'
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    content.vb: Public Function GetNewParameter(Of T As Class)(obj As T, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As List(Of DbParameter)
  overload: DotNetHelper.Database.DataSource.DB`1.GetNewParameter*
  nameWithType.vb: DB(Of TDbConnection).GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewParameter(Of T)(T, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: GetNewParameter(Of T)(T, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewCommand(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetNewCommand(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  id: GetNewCommand(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetNewCommand(TDbConnection, String, CommandType, IEnumerable<DbParameter>)
  nameWithType: DB<TDbConnection>.GetNewCommand(TDbConnection, String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewCommand(TDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommand
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 128
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\ncreates a new dbcommand from the connection\n"
  example: []
  syntax:
    content: public DbCommand GetNewCommand(TDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<DbParameter> parameters = null)
    parameters:
    - id: connection
      type: '{TDbConnection}'
      description: ''
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function GetNewCommand(connection As TDbConnection, sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of DbParameter) = Nothing) As DbCommand
  overload: DotNetHelper.Database.DataSource.DB`1.GetNewCommand*
  nameWithType.vb: DB(Of TDbConnection).GetNewCommand(TDbConnection, String, CommandType, IEnumerable(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewCommand(TDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: GetNewCommand(TDbConnection, String, CommandType, IEnumerable(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewCommandAndTransaction(`0)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetNewCommandAndTransaction(`0)
  id: GetNewCommandAndTransaction(`0)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetNewCommandAndTransaction(TDbConnection)
  nameWithType: DB<TDbConnection>.GetNewCommandAndTransaction(TDbConnection)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewCommandAndTransaction(TDbConnection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommandAndTransaction
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 149
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\n\n"
  example: []
  syntax:
    content: public (DbCommand command, DbTransaction transaction) GetNewCommandAndTransaction(TDbConnection connection)
    parameters:
    - id: connection
      type: '{TDbConnection}'
      description: ''
    return:
      type: System.ValueTuple{System.Data.Common.DbCommand,System.Data.Common.DbTransaction}
      description: ''
    content.vb: Public Function GetNewCommandAndTransaction(connection As TDbConnection) As(command As DbCommand, transaction As DbTransaction)
  overload: DotNetHelper.Database.DataSource.DB`1.GetNewCommandAndTransaction*
  nameWithType.vb: DB(Of TDbConnection).GetNewCommandAndTransaction(TDbConnection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewCommandAndTransaction(TDbConnection)
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  id: ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String, CommandType, IEnumerable<DbParameter>)
  nameWithType: DB<TDbConnection>.ExecuteNonQuery(String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteNonQuery
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 171
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecute an SQL Command and returns the number of rows affected\n"
  example: []
  syntax:
    content: public int ExecuteNonQuery(string sql, CommandType commandType = CommandType.Text, IEnumerable<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteNonQuery(sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of DbParameter) = Nothing) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
  nameWithType.vb: DB(Of TDbConnection).ExecuteNonQuery(String, CommandType, IEnumerable(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  id: ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteNonQueryAsync(String, CommandType, IEnumerable<DbParameter>)
  nameWithType: DB<TDbConnection>.ExecuteNonQueryAsync(String, CommandType, IEnumerable<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteNonQueryAsync(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteNonQueryAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 195
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecute an SQL Command and returns the number of rows affected\n"
  example: []
  syntax:
    content: public Task<int> ExecuteNonQueryAsync(string sql, CommandType commandType = CommandType.Text, IEnumerable<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteNonQueryAsync(sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of DbParameter) = Nothing) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteNonQueryAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
  nameWithType.vb: DB(Of TDbConnection).ExecuteNonQueryAsync(String, CommandType, IEnumerable(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteNonQueryAsync(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))
  name.vb: ExecuteNonQueryAsync(String, CommandType, IEnumerable(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteScalar
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 219
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and return the 1st column of the 1st row as an object\n"
  example: []
  syntax:
    content: public object ExecuteScalar(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Public Function ExecuteScalar(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As Object
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteScalar*
  nameWithType.vb: DB(Of TDbConnection).ExecuteScalar(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteScalarAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteScalarAsync(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.ExecuteScalarAsync(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteScalarAsync(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteScalarAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 243
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and return the 1st column of the 1st row as an object\n"
  example: []
  syntax:
    content: public Task<object> ExecuteScalarAsync(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: ''
    content.vb: Public Function ExecuteScalarAsync(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As Task(Of Object)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteScalarAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteScalarAsync(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteScalarAsync(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalarAsync(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  id: ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: DB<TDbConnection>.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransaction
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 268
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes a list of sql as in a single transaction \n"
  example: []
  syntax:
    content: public int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.String}
      description: ''
    - id: rollbackOnException
      type: System.Boolean
      description: ''
    - id: throwException
      type: System.Boolean
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteTransaction(sqls As List(Of String), rollbackOnException As Boolean, throwException As Boolean = True) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction*
  nameWithType.vb: DB(Of TDbConnection).ExecuteTransaction(List(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  id: ExecuteTransactionAsync(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteTransactionAsync(List<String>, Boolean, Boolean)
  nameWithType: DB<TDbConnection>.ExecuteTransactionAsync(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteTransactionAsync(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransactionAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 282
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes a list of sql as in a single transaction \n"
  example: []
  syntax:
    content: public Task<int> ExecuteTransactionAsync(List<string> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.String}
      description: ''
    - id: rollbackOnException
      type: System.Boolean
      description: ''
    - id: throwException
      type: System.Boolean
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteTransactionAsync(sqls As List(Of String), rollbackOnException As Boolean, throwException As Boolean = True) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteTransactionAsync(List(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteTransactionAsync(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransactionAsync(List(Of String), Boolean, Boolean)
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  id: ExecuteTransaction(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteTransaction(List<KeyValuePair<String, IEnumerable<DbParameter>>>, Boolean, Boolean)
  nameWithType: DB<TDbConnection>.ExecuteTransaction(List<KeyValuePair<String, IEnumerable<DbParameter>>>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteTransaction(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>>>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransaction
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 296
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes a list of sql as in a single transaction \n"
  example: []
  syntax:
    content: public int ExecuteTransaction(List<KeyValuePair<string, IEnumerable<DbParameter>>> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}}
      description: ''
    - id: rollbackOnException
      type: System.Boolean
      description: ''
    - id: throwException
      type: System.Boolean
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteTransaction(sqls As List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter))), rollbackOnException As Boolean, throwException As Boolean = True) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction*
  nameWithType.vb: DB(Of TDbConnection).ExecuteTransaction(List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter))), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteTransaction(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter))), Boolean, Boolean)
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  id: ExecuteTransactionAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteTransactionAsync(List<KeyValuePair<String, IEnumerable<DbParameter>>>, Boolean, Boolean)
  nameWithType: DB<TDbConnection>.ExecuteTransactionAsync(List<KeyValuePair<String, IEnumerable<DbParameter>>>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteTransactionAsync(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>>>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransactionAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 364
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes a list of sql as in a single transaction \n"
  example: []
  syntax:
    content: public Task<int> ExecuteTransactionAsync(List<KeyValuePair<string, IEnumerable<DbParameter>>> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}}
      description: ''
    - id: rollbackOnException
      type: System.Boolean
      description: ''
    - id: throwException
      type: System.Boolean
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteTransactionAsync(sqls As List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter))), rollbackOnException As Boolean, throwException As Boolean = True) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteTransactionAsync(List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter))), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteTransactionAsync(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter))), System.Boolean, System.Boolean)
  name.vb: ExecuteTransactionAsync(List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter))), Boolean, Boolean)
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  id: GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataReader(String, CommandType, List<DbParameter>, CommandBehavior)
  nameWithType: DB<TDbConnection>.GetDataReader(String, CommandType, List<DbParameter>, CommandBehavior)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>, System.Data.CommandBehavior)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataReader
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 425
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nexecute the sql and return the result as a DbDataReader\n"
  example: []
  syntax:
    content: public DbDataReader GetDataReader(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null, CommandBehavior commandBehavior = CommandBehavior.CloseConnection)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    - id: commandBehavior
      type: System.Data.CommandBehavior
    return:
      type: System.Data.Common.DbDataReader
      description: ''
    content.vb: Public Function GetDataReader(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing, commandBehavior As CommandBehavior = CommandBehavior.CloseConnection) As DbDataReader
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataReader*
  nameWithType.vb: DB(Of TDbConnection).GetDataReader(String, CommandType, List(Of DbParameter), CommandBehavior)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter), System.Data.CommandBehavior)
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter), CommandBehavior)
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataReaderAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataReaderAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  id: GetDataReaderAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandBehavior)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataReaderAsync(String, CommandType, List<DbParameter>, CommandBehavior)
  nameWithType: DB<TDbConnection>.GetDataReaderAsync(String, CommandType, List<DbParameter>, CommandBehavior)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataReaderAsync(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>, System.Data.CommandBehavior)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataReaderAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 443
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nexecute the sql and return the result as a DbDataReader\n"
  example: []
  syntax:
    content: public Task<DbDataReader> GetDataReaderAsync(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null, CommandBehavior commandBehavior = CommandBehavior.CloseConnection)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    - id: commandBehavior
      type: System.Data.CommandBehavior
    return:
      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
      description: ''
    content.vb: Public Function GetDataReaderAsync(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing, commandBehavior As CommandBehavior = CommandBehavior.CloseConnection) As Task(Of DbDataReader)
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataReaderAsync*
  nameWithType.vb: DB(Of TDbConnection).GetDataReaderAsync(String, CommandType, List(Of DbParameter), CommandBehavior)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataReaderAsync(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter), System.Data.CommandBehavior)
  name.vb: GetDataReaderAsync(String, CommandType, List(Of DbParameter), CommandBehavior)
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 463
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: public DataTable GetDataTable(string selectSql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTable(selectSql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataTable*
  nameWithType.vb: DB(Of TDbConnection).GetDataTable(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 479
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithSchema(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchema*
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchemaAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchemaAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithSchemaAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchemaAsync(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetDataTableWithSchemaAsync(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithSchemaAsync(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchemaAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 506
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: public Task<DataTable> GetDataTableWithSchemaAsync(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Data.DataTable}
      description: ''
    content.vb: Public Function GetDataTableWithSchemaAsync(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As Task(Of DataTable)
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchemaAsync*
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithSchemaAsync(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithSchemaAsync(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchemaAsync(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 535
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithKeyInfo(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfo*
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfoAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfoAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithKeyInfoAsync(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfoAsync(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetDataTableWithKeyInfoAsync(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithKeyInfoAsync(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfoAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 564
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance\n"
  example: []
  syntax:
    content: public Task<DataTable> GetDataTableWithKeyInfoAsync(string sql, CommandType commandType = CommandType.Text, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Data.DataTable}
      description: ''
    content.vb: Public Function GetDataTableWithKeyInfoAsync(sql As String, commandType As CommandType = CommandType.Text, parameters As List(Of DbParameter) = Nothing) As Task(Of DataTable)
  overload: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfoAsync*
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithKeyInfoAsync(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithKeyInfoAsync(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfoAsync(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.CanConnect
  commentId: M:DotNetHelper.Database.DataSource.DB`1.CanConnect
  id: CanConnect
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: CanConnect()
  nameWithType: DB<TDbConnection>.CanConnect()
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.CanConnect()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CanConnect
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 591
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nAttempts to open a connection to the database using the connection string provided in the constructor. \n"
  example: []
  syntax:
    content: public bool CanConnect()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function CanConnect As Boolean
  overload: DotNetHelper.Database.DataSource.DB`1.CanConnect*
  nameWithType.vb: DB(Of TDbConnection).CanConnect()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).CanConnect()
- uid: DotNetHelper.Database.DataSource.DB`1.CanConnectAsync
  commentId: M:DotNetHelper.Database.DataSource.DB`1.CanConnectAsync
  id: CanConnectAsync
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: CanConnectAsync()
  nameWithType: DB<TDbConnection>.CanConnectAsync()
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.CanConnectAsync()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CanConnectAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 611
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nAttempts to open a connection to the database using the connection string provided in the constructor. \n"
  example: []
  syntax:
    content: public Task<bool> CanConnectAsync()
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Public Function CanConnectAsync As Task(Of Boolean)
  overload: DotNetHelper.Database.DataSource.DB`1.CanConnectAsync*
  nameWithType.vb: DB(Of TDbConnection).CanConnectAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).CanConnectAsync()
- uid: DotNetHelper.Database.DataSource.DB`1.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: DB<TDbConnection>.Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Get<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 639
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the specified sql and maps the results a list of objects\n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null)

          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: 'The sql result mapped to a list of '
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DB`1.Get*
  nameWithType.vb: DB(Of TDbConnection).Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetAsync``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetAsync<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetAsync<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 656
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the specified sql and maps the results a list of objects\n"
  example: []
  syntax:
    content: >-
      public Task<List<T>> GetAsync<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null)

          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: 'The sql result mapped to a list of '
    content.vb: Public Function GetAsync(Of T As Class)(sql As String, commandType As CommandType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), parameters As List(Of DbParameter) = Nothing) As Task(Of List(Of T))
  overload: DotNetHelper.Database.DataSource.DB`1.GetAsync*
  nameWithType.vb: DB(Of TDbConnection).GetAsync(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetAsync(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetAsync(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.Get``1
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Get``1
  id: Get``1
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Get<T>()
  nameWithType: DB<TDbConnection>.Get<T>()
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Get<T>()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 667
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a list of type of T from the database. \n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>()

          where T : class
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function Get(Of T As Class) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DB`1.Get*
  nameWithType.vb: DB(Of TDbConnection).Get(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Get(Of T)()
  name.vb: Get(Of T)()
- uid: DotNetHelper.Database.DataSource.DB`1.GetAsync``1
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetAsync``1
  id: GetAsync``1
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetAsync<T>()
  nameWithType: DB<TDbConnection>.GetAsync<T>()
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetAsync<T>()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 677
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a list of type of T from the database. \n"
  example: []
  syntax:
    content: >-
      public Task<List<T>> GetAsync<T>()

          where T : class
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: ''
    content.vb: Public Function GetAsync(Of T As Class) As Task(Of List(Of T))
  overload: DotNetHelper.Database.DataSource.DB`1.GetAsync*
  nameWithType.vb: DB(Of TDbConnection).GetAsync(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetAsync(Of T)()
  name.vb: GetAsync(Of T)()
- uid: DotNetHelper.Database.DataSource.DB`1.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  id: Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: DB<TDbConnection>.Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Get<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 691
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a list of type of T from the database. \n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer)

          where T : class
    parameters:
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function Get(Of T As Class)(xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object)) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DB`1.Get*
  nameWithType.vb: DB(Of TDbConnection).Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Get(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
- uid: DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  id: GetAsync``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetAsync<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: DB<TDbConnection>.GetAsync<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetAsync<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 705
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nreturn a list of type of T from the database. \n"
  example: []
  syntax:
    content: >-
      public Task<List<T>> GetAsync<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer)

          where T : class
    parameters:
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: ''
    content.vb: Public Function GetAsync(Of T As Class)(xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object)) As Task(Of List(Of T))
  overload: DotNetHelper.Database.DataSource.DB`1.GetAsync*
  nameWithType.vb: DB(Of TDbConnection).GetAsync(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetAsync(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: GetAsync(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
- uid: DotNetHelper.Database.DataSource.DB`1.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 719
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and map the results to a list of type of T\n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null)

          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DB`1.Get*
  nameWithType.vb: DB(Of TDbConnection).Get(Of T)(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.GetAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetAsync``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, CommandType, List<DbParameter>)
  nameWithType: DB<TDbConnection>.GetAsync<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetAsync<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 733
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and map the results to a list of type of T\n"
  example: []
  syntax:
    content: >-
      public Task<List<T>> GetAsync<T>(string sql, CommandType commandType, List<DbParameter> parameters = null)

          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: Specifies how a command string is interpreted.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: ''
    content.vb: Public Function GetAsync(Of T As Class)(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As Task(Of List(Of T))
  overload: DotNetHelper.Database.DataSource.DB`1.GetAsync*
  nameWithType.vb: DB(Of TDbConnection).GetAsync(Of T)(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetAsync(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetAsync(Of T)(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType)
  nameWithType: DB<TDbConnection>.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 745
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: the object to create sql from
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: '# of rows affected'
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.Execute*
  nameWithType.vb: DB(Of TDbConnection).Execute(Of T)(T, ActionType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync<T>(T, ActionType)
  nameWithType: DB<TDbConnection>.ExecuteAsync<T>(T, ActionType)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 758
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public Task<int> ExecuteAsync<T>(T instance, ActionType actionType)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: the object to create sql from
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: '# of rows affected'
    content.vb: Public Function ExecuteAsync(Of T As Class)(instance As T, actionType As ActionType) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAsync(Of T)(T, ActionType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: ExecuteAsync(Of T)(T, ActionType)
- uid: DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String)
  nameWithType: DB<TDbConnection>.Execute<T>(T, ActionType, String)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 771
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.Execute*
  nameWithType.vb: DB(Of TDbConnection).Execute(Of T)(T, ActionType, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  name.vb: Execute(Of T)(T, ActionType, String)
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  id: ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync<T>(T, ActionType, String)
  nameWithType: DB<TDbConnection>.ExecuteAsync<T>(T, ActionType, String)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 784
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public Task<int> ExecuteAsync<T>(T instance, ActionType actionType, string tableName)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteAsync(Of T As Class)(instance As T, actionType As ActionType, tableName As String) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAsync(Of T)(T, ActionType, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String)
  name.vb: ExecuteAsync(Of T)(T, ActionType, String)
- uid: DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DB<TDbConnection>.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 800
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.Execute*
  nameWithType.vb: DB(Of TDbConnection).Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DB<TDbConnection>.ExecuteAsync<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 841
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public Task<int> ExecuteAsync<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteAsync(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAsync(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: ExecuteAsync(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.Execute<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 879
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, params Expression<Func<T, object>>[] keyFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: keyFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, ParamArray keyFields As Expression(Of Func(Of T, Object))()) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.Execute*
  nameWithType.vb: DB(Of TDbConnection).Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAsync<T>(T, ActionType, String, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 895
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public Task<int> ExecuteAsync<T>(T instance, ActionType actionType, string tableName, params Expression<Func<T, object>>[] keyFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: keyFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteAsync(Of T As Class)(instance As T, actionType As ActionType, tableName As String, ParamArray keyFields As Expression(Of Func(Of T, Object))()) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAsync(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAsync(Of T)(T, ActionType, String, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 915
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] keyFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: keyFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: Override attributes and specified which properties are keys from an expression
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray keyFields As Expression(Of Func(Of T, Object))()) As Integer
  overload: DotNetHelper.Database.DataSource.DB`1.Execute*
  nameWithType.vb: DB(Of TDbConnection).Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAsync<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 934
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and return the number of rows affected. \n"
  example: []
  syntax:
    content: >-
      public Task<int> ExecuteAsync<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] keyFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: tableName
      type: System.String
      description: 'Table name to use when generating sql '
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: keyFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: Override attributes and specified which properties are keys from an expression
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: ''
    content.vb: Public Function ExecuteAsync(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray keyFields As Expression(Of Func(Of T, Object))()) As Task(Of Integer)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAsync(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAsync(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 950
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and applies the reflected values to the instance provided. This is useful when dealing with identity fields  \n"
  example: []
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: 'the fields to return that will reflect the values after the sql is executed  '
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsync<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutputAsync<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutputAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 963
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the specified SQL from the object then executes the sql and applies the reflected values to the instance provided. This is useful when dealing with identity fields  \n"
  example: []
  syntax:
    content: >-
      public Task<T> ExecuteAndGetOutputAsync<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: 'the fields to return that will reflect the values after the sql is executed  '
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Public Function ExecuteAndGetOutputAsync(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As Task(Of T)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutputAsync(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutputAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsync(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 982
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the sql and applies the reflected values tothe specified SQL from the object then executes t the instance provided. This is useful when dealing with identity fields  \n"
  example: []
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsync``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsync<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutputAsync<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutputAsync<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1009
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nCreates the sql and applies the reflected values tothe specified SQL from the object then executes t the instance provided. This is useful when dealing with identity fields  \n"
  example: []
  syntax:
    content: >-
      public Task<T> ExecuteAndGetOutputAsync<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
      description: 'the object to create sql from '
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: type of sql to generate
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: Func to invoke on properties that mark with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as xml. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.XML)]
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as json. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.JSON)]
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
      description: For when your storing values in the database as csv. This func will be invoke to serialize any property declarated with [SqlColumnAttribute(SerializableType = SerializableType.CSV)]
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Public Function ExecuteAndGetOutputAsync(Of T As Class)(instance As T, actionType As ActionType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As Task(Of T)
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutputAsync(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutputAsync(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsync(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1022
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public DbDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.Common.DbDataReader
    content.vb: Public Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As DbDataReader
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1027
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public DbDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)

          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.Common.DbDataReader
    content.vb: Public Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As DbDataReader
  overload: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader*
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  id: SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: DB<TDbConnection>.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopy
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1046
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public long SqlServerBulkCopy<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions)

          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int64
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopy(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions) As Long
  overload: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy*
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions)
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  id: SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: DB<TDbConnection>.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopy
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1060
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public long SqlServerBulkCopy<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName)

          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int64
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopy(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String) As Long
  overload: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy*
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String)
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  id: SqlServerBulkCopy``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: DB<TDbConnection>.SqlServerBulkCopy<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopy<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopy
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1074
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public long SqlServerBulkCopy<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName, int batchSize)

          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    - id: batchSize
      type: System.Int32
      description: The integer value of the BatchSize property, or zero if no value has been set.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int64
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopy(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String, batchSize As Integer) As Long
  overload: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy*
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopy(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopy(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  id: SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  nameWithType: DB<TDbConnection>.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopyAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1114
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public Task<long> SqlServerBulkCopyAsync<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions)

          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopyAsync(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions) As Task(Of Long)
  overload: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync*
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions)
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  id: SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  nameWithType: DB<TDbConnection>.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopyAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1128
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public Task<long> SqlServerBulkCopyAsync<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName)

          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopyAsync(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String) As Task(Of Long)
  overload: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync*
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String)
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  id: SqlServerBulkCopyAsync``1(System.Collections.Generic.List{``0},System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Int32)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  nameWithType: DB<TDbConnection>.SqlServerBulkCopyAsync<T>(List<T>, SqlBulkCopyOptions, String, Int32)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopyAsync<T>(System.Collections.Generic.List<T>, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlServerBulkCopyAsync
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1142
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nPerform a SQLBulkCopy \n"
  example: []
  syntax:
    content: >-
      public Task<long> SqlServerBulkCopyAsync<T>(List<T> data, SqlBulkCopyOptions bulkCopyOptions, string tableName, int batchSize)

          where T : class
    parameters:
    - id: data
      type: System.Collections.Generic.List{{T}}
      description: ''
    - id: bulkCopyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: bulk copy option
    - id: tableName
      type: System.String
      description: table name to insert data into
    - id: batchSize
      type: System.Int32
      description: The integer value of the BatchSize property, or zero if no value has been set.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: '# of records inserted'
    content.vb: Public Function SqlServerBulkCopyAsync(Of T As Class)(data As List(Of T), bulkCopyOptions As SqlBulkCopyOptions, tableName As String, batchSize As Integer) As Task(Of Long)
  overload: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync*
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopyAsync(Of T)(System.Collections.Generic.List(Of T), System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Int32)
  name.vb: SqlServerBulkCopyAsync(Of T)(List(Of T), SqlBulkCopyOptions, String, Int32)
- uid: DotNetHelper.Database.DataSource.DB`1.Dispose
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Dispose
  id: Dispose
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DB<TDbConnection>.Dispose()
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Dispose()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Dispose
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1177
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: DotNetHelper.Database.DataSource.DB`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: DB(Of TDbConnection).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Dispose()
- uid: DotNetHelper.Database.DataSource.DB`1.Dispose(System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DB`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: DotNetHelper.Database.DataSource.DB`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: DB<TDbConnection>.Dispose(Boolean)
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataSource/DB.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Dispose
    path: ../src/DotNetHelper.Database/DataSource/DB.cs
    startLine: 1184
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: DotNetHelper.Database.DataSource.DB`1.Dispose*
  nameWithType.vb: DB(Of TDbConnection).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Dispose(System.Boolean)
references:
- uid: DotNetHelper.Database.DataSource
  commentId: N:DotNetHelper.Database.DataSource
  name: DotNetHelper.Database.DataSource
  nameWithType: DotNetHelper.Database.DataSource
  fullName: DotNetHelper.Database.DataSource
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.Database.DataSource.DB`1.ConnectionString*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ConnectionString
  name: ConnectionString
  nameWithType: DB<TDbConnection>.ConnectionString
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ConnectionString
  nameWithType.vb: DB(Of TDbConnection).ConnectionString
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper.Database.DataSource.DB`1.CommandTimeOut*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.CommandTimeOut
  name: CommandTimeOut
  nameWithType: DB<TDbConnection>.CommandTimeOut
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.CommandTimeOut
  nameWithType.vb: DB(Of TDbConnection).CommandTimeOut
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).CommandTimeOut
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: DotNetHelper.Database.DataSource.DB`1.ObjectToSql*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ObjectToSql
  name: ObjectToSql
  nameWithType: DB<TDbConnection>.ObjectToSql
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ObjectToSql
  nameWithType.vb: DB(Of TDbConnection).ObjectToSql
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.Services.ObjectToSql
  parent: DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.Services.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services
  commentId: N:DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: DotNetHelper.ObjectToSql.Services
  nameWithType: DotNetHelper.ObjectToSql.Services
  fullName: DotNetHelper.ObjectToSql.Services
- uid: DotNetHelper.Database.DataSource.DB`1.DatabaseType*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.DatabaseType
  name: DatabaseType
  nameWithType: DB<TDbConnection>.DatabaseType
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.DatabaseType
  nameWithType.vb: DB(Of TDbConnection).DatabaseType
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).DatabaseType
- uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
  commentId: T:DotNetHelper.ObjectToSql.Enum.DataBaseType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
- uid: DotNetHelper.ObjectToSql.Enum
  commentId: N:DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DotNetHelper.ObjectToSql.Enum
  nameWithType: DotNetHelper.ObjectToSql.Enum
  fullName: DotNetHelper.ObjectToSql.Enum
- uid: DotNetHelper.Database.DataSource.DB`1.#ctor*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.#ctor
  name: DB
  nameWithType: DB<TDbConnection>.DB
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.DB
  nameWithType.vb: DB(Of TDbConnection).DB
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).DB
- uid: '{TDbConnection}'
  commentId: '!:TDbConnection'
  definition: TDbConnection
  name: TDbConnection
  nameWithType: TDbConnection
  fullName: TDbConnection
- uid: System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType}
  commentId: T:System.Nullable{DotNetHelper.ObjectToSql.Enum.DataBaseType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DataBaseType>
  nameWithType: Nullable<DataBaseType>
  fullName: System.Nullable<DotNetHelper.ObjectToSql.Enum.DataBaseType>
  nameWithType.vb: Nullable(Of DataBaseType)
  fullName.vb: System.Nullable(Of DotNetHelper.ObjectToSql.Enum.DataBaseType)
  name.vb: Nullable(Of DataBaseType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
    name: DataBaseType
    nameWithType: DataBaseType
    fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
    name: DataBaseType
    nameWithType: DataBaseType
    fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TDbConnection
  name: TDbConnection
  nameWithType: TDbConnection
  fullName: TDbConnection
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewParameter*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetNewParameter
  name: GetNewParameter
  nameWithType: DB<TDbConnection>.GetNewParameter
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewParameter
  nameWithType.vb: DB(Of TDbConnection).GetNewParameter
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewParameter
- uid: System.Data.Common.DbParameter
  commentId: T:System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: true
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{System.Object,System.String}
  commentId: T:System.Func{System.Object,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Object, String>
  nameWithType: Func<Object, String>
  fullName: System.Func<System.Object, System.String>
  nameWithType.vb: Func(Of Object, String)
  fullName.vb: System.Func(Of System.Object, System.String)
  name.vb: Func(Of Object, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewCommand*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetNewCommand
  name: GetNewCommand
  nameWithType: DB<TDbConnection>.GetNewCommand
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewCommand
  nameWithType.vb: DB(Of TDbConnection).GetNewCommand
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewCommand
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DbParameter>
  nameWithType: IEnumerable<DbParameter>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>
  nameWithType.vb: IEnumerable(Of DbParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter)
  name.vb: IEnumerable(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbCommand
  commentId: T:System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: true
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetNewCommandAndTransaction*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetNewCommandAndTransaction
  name: GetNewCommandAndTransaction
  nameWithType: DB<TDbConnection>.GetNewCommandAndTransaction
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetNewCommandAndTransaction
  nameWithType.vb: DB(Of TDbConnection).GetNewCommandAndTransaction
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetNewCommandAndTransaction
- uid: System.ValueTuple{System.Data.Common.DbCommand,System.Data.Common.DbTransaction}
  commentId: T:System.ValueTuple{System.Data.Common.DbCommand,System.Data.Common.DbTransaction}
  parent: System
  isExternal: true
  name: ValueTuple<DbCommand, DbTransaction>
  nameWithType: ValueTuple<DbCommand, DbTransaction>
  fullName: System.ValueTuple<System.Data.Common.DbCommand, System.Data.Common.DbTransaction>
  nameWithType.vb: ValueTuple(Of DbCommand, DbTransaction)
  fullName.vb: System.ValueTuple(Of System.Data.Common.DbCommand, System.Data.Common.DbTransaction)
  name.vb: ValueTuple(Of DbCommand, DbTransaction)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbCommand
    name: DbCommand
    nameWithType: DbCommand
    fullName: System.Data.Common.DbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbTransaction
    name: DbTransaction
    nameWithType: DbTransaction
    fullName: System.Data.Common.DbTransaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbCommand
    name: DbCommand
    nameWithType: DbCommand
    fullName: System.Data.Common.DbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbTransaction
    name: DbTransaction
    nameWithType: DbTransaction
    fullName: System.Data.Common.DbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteNonQuery*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: DB<TDbConnection>.ExecuteNonQuery
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteNonQuery
  nameWithType.vb: DB(Of TDbConnection).ExecuteNonQuery
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteNonQuery
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteNonQueryAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteNonQueryAsync
  name: ExecuteNonQueryAsync
  nameWithType: DB<TDbConnection>.ExecuteNonQueryAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteNonQueryAsync
  nameWithType.vb: DB(Of TDbConnection).ExecuteNonQueryAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteNonQueryAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteScalar*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteScalar
  name: ExecuteScalar
  nameWithType: DB<TDbConnection>.ExecuteScalar
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteScalar
  nameWithType.vb: DB(Of TDbConnection).ExecuteScalar
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteScalar
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteScalarAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteScalarAsync
  name: ExecuteScalarAsync
  nameWithType: DB<TDbConnection>.ExecuteScalarAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteScalarAsync
  nameWithType.vb: DB(Of TDbConnection).ExecuteScalarAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteScalarAsync
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteTransaction
  name: ExecuteTransaction
  nameWithType: DB<TDbConnection>.ExecuteTransaction
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteTransaction
  nameWithType.vb: DB(Of TDbConnection).ExecuteTransaction
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteTransaction
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteTransactionAsync
  name: ExecuteTransactionAsync
  nameWithType: DB<TDbConnection>.ExecuteTransactionAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteTransactionAsync
  nameWithType.vb: DB(Of TDbConnection).ExecuteTransactionAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteTransactionAsync
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<String, IEnumerable<DbParameter>>>
  nameWithType: List<KeyValuePair<String, IEnumerable<DbParameter>>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter>>>
  nameWithType.vb: List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Collections.Generic.IEnumerable(Of System.Data.Common.DbParameter)))
  name.vb: List(Of KeyValuePair(Of String, IEnumerable(Of DbParameter)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataReader*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataReader
  name: GetDataReader
  nameWithType: DB<TDbConnection>.GetDataReader
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataReader
  nameWithType.vb: DB(Of TDbConnection).GetDataReader
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataReader
- uid: System.Data.CommandBehavior
  commentId: T:System.Data.CommandBehavior
  parent: System.Data
  isExternal: true
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataReaderAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataReaderAsync
  name: GetDataReaderAsync
  nameWithType: DB<TDbConnection>.GetDataReaderAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataReaderAsync
  nameWithType.vb: DB(Of TDbConnection).GetDataReaderAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataReaderAsync
- uid: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
  commentId: T:System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DbDataReader>
  nameWithType: Task<DbDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.Common.DbDataReader>
  nameWithType.vb: Task(Of DbDataReader)
  fullName.vb: System.Threading.Tasks.Task(Of System.Data.Common.DbDataReader)
  name.vb: Task(Of DbDataReader)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTable*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataTable
  name: GetDataTable
  nameWithType: DB<TDbConnection>.GetDataTable
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTable
  nameWithType.vb: DB(Of TDbConnection).GetDataTable
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchema*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchema
  name: GetDataTableWithSchema
  nameWithType: DB<TDbConnection>.GetDataTableWithSchema
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithSchema
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithSchema
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithSchema
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchemaAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithSchemaAsync
  name: GetDataTableWithSchemaAsync
  nameWithType: DB<TDbConnection>.GetDataTableWithSchemaAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithSchemaAsync
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithSchemaAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithSchemaAsync
- uid: System.Threading.Tasks.Task{System.Data.DataTable}
  commentId: T:System.Threading.Tasks.Task{System.Data.DataTable}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DataTable>
  nameWithType: Task<DataTable>
  fullName: System.Threading.Tasks.Task<System.Data.DataTable>
  nameWithType.vb: Task(Of DataTable)
  fullName.vb: System.Threading.Tasks.Task(Of System.Data.DataTable)
  name.vb: Task(Of DataTable)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: System.Data.DataTable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: System.Data.DataTable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfo*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfo
  name: GetDataTableWithKeyInfo
  nameWithType: DB<TDbConnection>.GetDataTableWithKeyInfo
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithKeyInfo
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithKeyInfo
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithKeyInfo
- uid: DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfoAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetDataTableWithKeyInfoAsync
  name: GetDataTableWithKeyInfoAsync
  nameWithType: DB<TDbConnection>.GetDataTableWithKeyInfoAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetDataTableWithKeyInfoAsync
  nameWithType.vb: DB(Of TDbConnection).GetDataTableWithKeyInfoAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetDataTableWithKeyInfoAsync
- uid: DotNetHelper.Database.DataSource.DB`1.CanConnect*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.CanConnect
  name: CanConnect
  nameWithType: DB<TDbConnection>.CanConnect
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.CanConnect
  nameWithType.vb: DB(Of TDbConnection).CanConnect
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).CanConnect
- uid: DotNetHelper.Database.DataSource.DB`1.CanConnectAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.CanConnectAsync
  name: CanConnectAsync
  nameWithType: DB<TDbConnection>.CanConnectAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.CanConnectAsync
  nameWithType.vb: DB(Of TDbConnection).CanConnectAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).CanConnectAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.Get*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.Get
  name: Get
  nameWithType: DB<TDbConnection>.Get
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Get
  nameWithType.vb: DB(Of TDbConnection).Get
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Get
- uid: System.Func{System.String,System.Type,System.Object}
  commentId: T:System.Func{System.String,System.Type,System.Object}
  parent: System
  definition: System.Func`3
  name: Func<String, Type, Object>
  nameWithType: Func<String, Type, Object>
  fullName: System.Func<System.String, System.Type, System.Object>
  nameWithType.vb: Func(Of String, Type, Object)
  fullName.vb: System.Func(Of System.String, System.Type, System.Object)
  name.vb: Func(Of String, Type, Object)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.GetAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.GetAsync
  name: GetAsync
  nameWithType: DB<TDbConnection>.GetAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.GetAsync
  nameWithType.vb: DB(Of TDbConnection).GetAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).GetAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.Execute*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.Execute
  name: Execute
  nameWithType: DB<TDbConnection>.Execute
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Execute
  nameWithType.vb: DB(Of TDbConnection).Execute
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Execute
- uid: DotNetHelper.ObjectToSql.Enum.ActionType
  commentId: T:DotNetHelper.ObjectToSql.Enum.ActionType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper.ObjectToSql.Enum.ActionType
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteAsync
  name: ExecuteAsync
  nameWithType: DB<TDbConnection>.ExecuteAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAsync
  nameWithType.vb: DB(Of TDbConnection).ExecuteAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAsync
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutput
  name: ExecuteAndGetOutput
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutput
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutput
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutput
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutput
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsync
  name: ExecuteAndGetOutputAsync
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutputAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutputAsync
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutputAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutputAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.ExecuteAndGetOutputAsDataReader
  name: ExecuteAndGetOutputAsDataReader
  nameWithType: DB<TDbConnection>.ExecuteAndGetOutputAsDataReader
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.ExecuteAndGetOutputAsDataReader
  nameWithType.vb: DB(Of TDbConnection).ExecuteAndGetOutputAsDataReader
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).ExecuteAndGetOutputAsDataReader
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopy
  name: SqlServerBulkCopy
  nameWithType: DB<TDbConnection>.SqlServerBulkCopy
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopy
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopy
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  commentId: T:System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.SqlClient
  commentId: N:System.Data.SqlClient
  isExternal: true
  name: System.Data.SqlClient
  nameWithType: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.SqlServerBulkCopyAsync
  name: SqlServerBulkCopyAsync
  nameWithType: DB<TDbConnection>.SqlServerBulkCopyAsync
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.SqlServerBulkCopyAsync
  nameWithType.vb: DB(Of TDbConnection).SqlServerBulkCopyAsync
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).SqlServerBulkCopyAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DB`1.Dispose*
  commentId: Overload:DotNetHelper.Database.DataSource.DB`1.Dispose
  name: Dispose
  nameWithType: DB<TDbConnection>.Dispose
  fullName: DotNetHelper.Database.DataSource.DB<TDbConnection>.Dispose
  nameWithType.vb: DB(Of TDbConnection).Dispose
  fullName.vb: DotNetHelper.Database.DataSource.DB(Of TDbConnection).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
