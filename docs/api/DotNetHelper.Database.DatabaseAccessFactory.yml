### YamlMime:ManagedReference
items:
- uid: DotNetHelper.Database.DatabaseAccessFactory
  commentId: T:DotNetHelper.Database.DatabaseAccessFactory
  id: DatabaseAccessFactory
  parent: DotNetHelper.Database
  children:
  - DotNetHelper.Database.DatabaseAccessFactory.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan)
  - DotNetHelper.Database.DatabaseAccessFactory.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan,System.TimeSpan)
  - DotNetHelper.Database.DatabaseAccessFactory.#ctor(System.Data.Common.DbProviderFactory,DotNetHelper.ObjectToSql.Enum.DataBaseType)
  - DotNetHelper.Database.DatabaseAccessFactory.#ctor(System.String,DotNetHelper.ObjectToSql.Enum.DataBaseType)
  - DotNetHelper.Database.DatabaseAccessFactory.CanConnect
  - DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut
  - DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut
  - DotNetHelper.Database.DatabaseAccessFactory.DatabaseType
  - DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory
  - DotNetHelper.Database.DatabaseAccessFactory.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.Database.DatabaseAccessFactory.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DatabaseAccessFactory.Get``1
  - DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  - DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String)
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String)
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String)
  - DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  - DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction(System.Data.IDbConnection)
  - DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection(System.Boolean)
  - DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter(System.String,System.Object)
  - DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql
  - DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper
  langs:
  - csharp
  - vb
  name: DatabaseAccessFactory
  nameWithType: DatabaseAccessFactory
  fullName: DotNetHelper.Database.DatabaseAccessFactory
  type: Class
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DatabaseAccessFactory
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 22
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: 'public class DatabaseAccessFactory : IDatabaseAccess'
    content.vb: >-
      Public Class DatabaseAccessFactory
          Implements IDatabaseAccess
  inheritance:
  - System.Object
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory
  commentId: P:DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory
  id: DbProviderFactory
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: DbProviderFactory
  nameWithType: DatabaseAccessFactory.DbProviderFactory
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DbProviderFactory
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 24
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DbProviderFactory DbProviderFactory { get; }
    parameters: []
    return:
      type: System.Data.Common.DbProviderFactory
    content.vb: Public ReadOnly Property DbProviderFactory As DbProviderFactory
  overload: DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut
  commentId: P:DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut
  id: CommandTimeOut
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: CommandTimeOut
  nameWithType: DatabaseAccessFactory.CommandTimeOut
  fullName: DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CommandTimeOut
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 25
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public TimeSpan CommandTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property CommandTimeOut As TimeSpan
  overload: DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut
  commentId: P:DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut
  id: ConnectionTimeOut
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ConnectionTimeOut
  nameWithType: DatabaseAccessFactory.ConnectionTimeOut
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ConnectionTimeOut
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 26
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public TimeSpan ConnectionTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property ConnectionTimeOut As TimeSpan
  overload: DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.DatabaseType
  commentId: P:DotNetHelper.Database.DatabaseAccessFactory.DatabaseType
  id: DatabaseType
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: DatabaseAccessFactory.DatabaseType
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseType
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DatabaseType
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 27
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DataBaseType DatabaseType { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public ReadOnly Property DatabaseType As DataBaseType
  overload: DotNetHelper.Database.DatabaseAccessFactory.DatabaseType*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql
  commentId: P:DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql
  id: ObjectToSql
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ObjectToSql
  nameWithType: DatabaseAccessFactory.ObjectToSql
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ObjectToSql
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 28
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public ObjectToSql ObjectToSql { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Services.ObjectToSql
    content.vb: Public ReadOnly Property ObjectToSql As ObjectToSql
  overload: DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper
  commentId: P:DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper
  id: SqlSyntaxHelper
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: SqlSyntaxHelper
  nameWithType: DatabaseAccessFactory.SqlSyntaxHelper
  fullName: DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlSyntaxHelper
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 29
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public SqlSyntaxHelper SqlSyntaxHelper { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
    content.vb: Public ReadOnly Property SqlSyntaxHelper As SqlSyntaxHelper
  overload: DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper.Database.DatabaseAccessFactory.#ctor(System.Data.Common.DbProviderFactory,DotNetHelper.ObjectToSql.Enum.DataBaseType)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.#ctor(System.Data.Common.DbProviderFactory,DotNetHelper.ObjectToSql.Enum.DataBaseType)
  id: '#ctor(System.Data.Common.DbProviderFactory,DotNetHelper.ObjectToSql.Enum.DataBaseType)'
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: DatabaseAccessFactory(DbProviderFactory, DataBaseType)
  nameWithType: DatabaseAccessFactory.DatabaseAccessFactory(DbProviderFactory, DataBaseType)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseAccessFactory(System.Data.Common.DbProviderFactory, DotNetHelper.ObjectToSql.Enum.DataBaseType)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 33
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DatabaseAccessFactory(DbProviderFactory dbProviderFactory, DataBaseType type)
    parameters:
    - id: dbProviderFactory
      type: System.Data.Common.DbProviderFactory
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public Sub New(dbProviderFactory As DbProviderFactory, type As DataBaseType)
  overload: DotNetHelper.Database.DatabaseAccessFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.#ctor(System.String,DotNetHelper.ObjectToSql.Enum.DataBaseType)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.#ctor(System.String,DotNetHelper.ObjectToSql.Enum.DataBaseType)
  id: '#ctor(System.String,DotNetHelper.ObjectToSql.Enum.DataBaseType)'
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: DatabaseAccessFactory(String, DataBaseType)
  nameWithType: DatabaseAccessFactory.DatabaseAccessFactory(String, DataBaseType)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseAccessFactory(System.String, DotNetHelper.ObjectToSql.Enum.DataBaseType)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 40
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DatabaseAccessFactory(string providerInvariantName, DataBaseType type)
    parameters:
    - id: providerInvariantName
      type: System.String
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public Sub New(providerInvariantName As String, type As DataBaseType)
  overload: DotNetHelper.Database.DatabaseAccessFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan)'
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: DatabaseAccessFactory(DataBaseType, TimeSpan)
  nameWithType: DatabaseAccessFactory.DatabaseAccessFactory(DataBaseType, TimeSpan)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseAccessFactory(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 48
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DatabaseAccessFactory(DataBaseType type, TimeSpan commandTimeOut)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    - id: commandTimeOut
      type: System.TimeSpan
    content.vb: Public Sub New(type As DataBaseType, commandTimeOut As TimeSpan)
  overload: DotNetHelper.Database.DatabaseAccessFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan,System.TimeSpan)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan,System.TimeSpan)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.TimeSpan,System.TimeSpan)'
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: DatabaseAccessFactory(DataBaseType, TimeSpan, TimeSpan)
  nameWithType: DatabaseAccessFactory.DatabaseAccessFactory(DataBaseType, TimeSpan, TimeSpan)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseAccessFactory(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: .ctor
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 54
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DatabaseAccessFactory(DataBaseType type, TimeSpan commandTimeOut, TimeSpan connectionTimeOut)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    - id: commandTimeOut
      type: System.TimeSpan
    - id: connectionTimeOut
      type: System.TimeSpan
    content.vb: Public Sub New(type As DataBaseType, commandTimeOut As TimeSpan, connectionTimeOut As TimeSpan)
  overload: DotNetHelper.Database.DatabaseAccessFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection(System.Boolean)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection(System.Boolean)
  id: GetNewConnection(System.Boolean)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetNewConnection(Boolean)
  nameWithType: DatabaseAccessFactory.GetNewConnection(Boolean)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewConnection
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 64
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public IDbConnection GetNewConnection(bool openConnection)
    parameters:
    - id: openConnection
      type: System.Boolean
    return:
      type: System.Data.IDbConnection
    content.vb: Public Function GetNewConnection(openConnection As Boolean) As IDbConnection
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  id: GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: DatabaseAccessFactory.GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommand
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 72
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public IDbCommand GetNewCommand(IDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<IDataParameter> parameters = null)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
    return:
      type: System.Data.IDbCommand
    content.vb: Public Function GetNewCommand(connection As IDbConnection, sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of IDataParameter) = Nothing) As IDbCommand
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  nameWithType.vb: DatabaseAccessFactory.GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction(System.Data.IDbConnection)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction(System.Data.IDbConnection)
  id: GetNewCommandAndTransaction(System.Data.IDbConnection)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetNewCommandAndTransaction(IDbConnection)
  nameWithType: DatabaseAccessFactory.GetNewCommandAndTransaction(IDbConnection)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction(System.Data.IDbConnection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommandAndTransaction
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 85
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public (IDbCommand command, IDbTransaction transaction)GetNewCommandAndTransaction(IDbConnection connection)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    return:
      type: System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
    content.vb: Public Function GetNewCommandAndTransaction(connection As IDbConnection) As(command As IDbCommand, transaction As IDbTransaction)
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  id: ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: DatabaseAccessFactory.ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteNonQuery
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 107
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nExecute an SQL Command and returns the number of rows affected\n"
  example: []
  syntax:
    content: public int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteNonQuery(sql As String, commandType As CommandType, parameters As IEnumerable(Of IDataParameter) = Nothing) As Integer
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  nameWithType.vb: DatabaseAccessFactory.ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteScalar
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 125
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nExecutes the sql and return the 1st column of the 1st row as an object\n"
  example: []
  syntax:
    content: public object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Public Function ExecuteScalar(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As Object
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.ExecuteScalar(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  id: ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: DatabaseAccessFactory.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransaction
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 135
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.String}
    - id: rollbackOnException
      type: System.Boolean
    - id: throwException
      type: System.Boolean
    return:
      type: System.Int32
    content.vb: Public Function ExecuteTransaction(sqls As List(Of String), rollbackOnException As Boolean, throwException As Boolean = True) As Integer
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  nameWithType.vb: DatabaseAccessFactory.ExecuteTransaction(List(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataReader(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.GetDataReader(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataReader
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 167
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public IDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    return:
      type: System.Data.IDataReader
    content.vb: Public Function GetDataReader(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As IDataReader
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataReader*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.GetDataReader(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 182
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: public DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTable(selectSql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.GetDataTable(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String)
  id: GetDataTable(System.String)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataTable(String)
  nameWithType: DatabaseAccessFactory.GetDataTable(String)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 195
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: public DataTable GetDataTable(string selectSql)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTable(selectSql As String) As DataTable
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 207
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithSchema(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 229
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithKeyInfo(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String)
  id: GetDataTableWithSchema(System.String)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String)
  nameWithType: DatabaseAccessFactory.GetDataTableWithSchema(String)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 247
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithSchema(sql As String) As DataTable
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String)
  id: GetDataTableWithKeyInfo(System.String)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String)
  nameWithType: DatabaseAccessFactory.GetDataTableWithKeyInfo(String)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 257
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better proformance\n"
  example: []
  syntax:
    content: public DataTable GetDataTableWithKeyInfo(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function GetDataTableWithKeyInfo(sql As String) As DataTable
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter(System.String,System.Object)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter(System.String,System.Object)
  id: GetNewParameter(System.String,System.Object)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: GetNewParameter(String, Object)
  nameWithType: DatabaseAccessFactory.GetNewParameter(String, Object)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewParameter
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 262
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public DbParameter GetNewParameter(string parameterName, object value)
    parameters:
    - id: parameterName
      type: System.String
    - id: value
      type: System.Object
    return:
      type: System.Data.Common.DbParameter
    content.vb: Public Function GetNewParameter(parameterName As String, value As Object) As DbParameter
  overload: DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.CanConnect
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.CanConnect
  id: CanConnect
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: CanConnect()
  nameWithType: DatabaseAccessFactory.CanConnect()
  fullName: DotNetHelper.Database.DatabaseAccessFactory.CanConnect()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CanConnect
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 271
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: public bool CanConnect()
    return:
      type: System.Boolean
    content.vb: Public Function CanConnect As Boolean
  overload: DotNetHelper.Database.DatabaseAccessFactory.CanConnect*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Get<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 297
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  summary: "\nExecutes the specified sql and maps the results a list of objects\n"
  example: []
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: 'The sql result mapped to a list of '
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DatabaseAccessFactory.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.Get``1
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.Get``1
  id: Get``1
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: Get<T>()
  nameWithType: DatabaseAccessFactory.Get<T>()
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Get<T>()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 302
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public List<T> Get<T>()
          where T : class
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class) As List(Of T)
  overload: DotNetHelper.Database.DatabaseAccessFactory.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  nameWithType.vb: DatabaseAccessFactory.Get(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.Get(Of T)()
  name.vb: Get(Of T)()
- uid: DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  id: Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: DatabaseAccessFactory.Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Get<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 306
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer)
          where T : class
    parameters:
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class)(xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object)) As List(Of T)
  overload: DotNetHelper.Database.DatabaseAccessFactory.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  nameWithType.vb: DatabaseAccessFactory.Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.Get(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
- uid: DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccessFactory.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 312
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DatabaseAccessFactory.Get*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  nameWithType.vb: DatabaseAccessFactory.Get(Of T)(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DatabaseAccessFactory.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType)
  nameWithType: DatabaseAccessFactory.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 317
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType) As Integer
  overload: DotNetHelper.Database.DatabaseAccessFactory.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType)
  nameWithType.vb: DatabaseAccessFactory.Execute(Of T)(T, ActionType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
- uid: DotNetHelper.Database.DatabaseAccessFactory.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DatabaseAccessFactory.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 322
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: tableName
      type: System.String
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As Integer
  overload: DotNetHelper.Database.DatabaseAccessFactory.Execute*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  nameWithType.vb: DatabaseAccessFactory.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccessFactory.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 331
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccessFactory.ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccessFactory.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 336
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccessFactory.ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 348
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.IDataReader
    content.vb: Public Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As IDataReader
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DatabaseAccessFactory
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/DataBaseAccessFactory.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/DataBaseAccessFactory.cs
    startLine: 353
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database
  syntax:
    content: >-
      public IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.IDataReader
    content.vb: Public Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As IDataReader
  overload: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader*
  implements:
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  nameWithType.vb: DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
references:
- uid: DotNetHelper.Database
  commentId: N:DotNetHelper.Database
  name: DotNetHelper.Database
  nameWithType: DotNetHelper.Database
  fullName: DotNetHelper.Database
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DotNetHelper.Database.Interface.IDatabaseAccess
  commentId: T:DotNetHelper.Database.Interface.IDatabaseAccess
  parent: DotNetHelper.Database.Interface
  name: IDatabaseAccess
  nameWithType: IDatabaseAccess
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.Database.Interface
  commentId: N:DotNetHelper.Database.Interface
  name: DotNetHelper.Database.Interface
  nameWithType: DotNetHelper.Database.Interface
  fullName: DotNetHelper.Database.Interface
- uid: DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory
  name: DbProviderFactory
  nameWithType: DatabaseAccessFactory.DbProviderFactory
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  commentId: T:System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: true
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut
  name: CommandTimeOut
  nameWithType: DatabaseAccessFactory.CommandTimeOut
  fullName: DotNetHelper.Database.DatabaseAccessFactory.CommandTimeOut
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: CommandTimeOut
  nameWithType: IDatabaseAccess.CommandTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut
  name: ConnectionTimeOut
  nameWithType: DatabaseAccessFactory.ConnectionTimeOut
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ConnectionTimeOut
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: ConnectionTimeOut
  nameWithType: IDatabaseAccess.ConnectionTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
- uid: DotNetHelper.Database.DatabaseAccessFactory.DatabaseType*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.DatabaseType
  name: DatabaseType
  nameWithType: DatabaseAccessFactory.DatabaseType
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseType
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: DatabaseType
  nameWithType: IDatabaseAccess.DatabaseType
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
- uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
  commentId: T:DotNetHelper.ObjectToSql.Enum.DataBaseType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
- uid: DotNetHelper.ObjectToSql.Enum
  commentId: N:DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DotNetHelper.ObjectToSql.Enum
  nameWithType: DotNetHelper.ObjectToSql.Enum
  fullName: DotNetHelper.ObjectToSql.Enum
- uid: DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql
  name: ObjectToSql
  nameWithType: DatabaseAccessFactory.ObjectToSql
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ObjectToSql
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: ObjectToSql
  nameWithType: IDatabaseAccess.ObjectToSql
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.Services.ObjectToSql
  parent: DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.Services.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services
  commentId: N:DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: DotNetHelper.ObjectToSql.Services
  nameWithType: DotNetHelper.ObjectToSql.Services
  fullName: DotNetHelper.ObjectToSql.Services
- uid: DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper
  name: SqlSyntaxHelper
  nameWithType: DatabaseAccessFactory.SqlSyntaxHelper
  fullName: DotNetHelper.Database.DatabaseAccessFactory.SqlSyntaxHelper
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: SqlSyntaxHelper
  nameWithType: IDatabaseAccess.SqlSyntaxHelper
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
- uid: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
  commentId: T:DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
  parent: DotNetHelper.ObjectToSql.Helper
  isExternal: true
  name: SqlSyntaxHelper
  nameWithType: SqlSyntaxHelper
  fullName: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
- uid: DotNetHelper.ObjectToSql.Helper
  commentId: N:DotNetHelper.ObjectToSql.Helper
  isExternal: true
  name: DotNetHelper.ObjectToSql.Helper
  nameWithType: DotNetHelper.ObjectToSql.Helper
  fullName: DotNetHelper.ObjectToSql.Helper
- uid: DotNetHelper.Database.DatabaseAccessFactory.#ctor*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.#ctor
  name: DatabaseAccessFactory
  nameWithType: DatabaseAccessFactory.DatabaseAccessFactory
  fullName: DotNetHelper.Database.DatabaseAccessFactory.DatabaseAccessFactory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection
  name: GetNewConnection
  nameWithType: DatabaseAccessFactory.GetNewConnection
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand
  name: GetNewCommand
  nameWithType: DatabaseAccessFactory.GetNewCommand
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommand
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: IDatabaseAccess.GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  nameWithType.vb: IDatabaseAccess.GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
    name: GetNewCommand
    nameWithType: IDatabaseAccess.GetNewCommand
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IDbConnection
    name: IDbConnection
    nameWithType: IDbConnection
    fullName: System.Data.IDbConnection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
    name: GetNewCommand
    nameWithType: IDatabaseAccess.GetNewCommand
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IDbConnection
    name: IDbConnection
    nameWithType: IDbConnection
    fullName: System.Data.IDbConnection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDataParameter>
  nameWithType: IEnumerable<IDataParameter>
  fullName: System.Collections.Generic.IEnumerable<System.Data.IDataParameter>
  nameWithType.vb: IEnumerable(Of IDataParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter)
  name.vb: IEnumerable(Of IDataParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDbCommand
  commentId: T:System.Data.IDbCommand
  parent: System.Data
  isExternal: true
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction
  name: GetNewCommandAndTransaction
  nameWithType: DatabaseAccessFactory.GetNewCommandAndTransaction
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewCommandAndTransaction
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetNewCommandAndTransaction(IDbConnection)
  nameWithType: IDatabaseAccess.GetNewCommandAndTransaction(IDbConnection)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
    name: GetNewCommandAndTransaction
    nameWithType: IDatabaseAccess.GetNewCommandAndTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IDbConnection
    name: IDbConnection
    nameWithType: IDbConnection
    fullName: System.Data.IDbConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
    name: GetNewCommandAndTransaction
    nameWithType: IDatabaseAccess.GetNewCommandAndTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IDbConnection
    name: IDbConnection
    nameWithType: IDbConnection
    fullName: System.Data.IDbConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
  commentId: T:System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
  parent: System
  isExternal: true
  name: ValueTuple<IDbCommand, IDbTransaction>
  nameWithType: ValueTuple<IDbCommand, IDbTransaction>
  fullName: System.ValueTuple<System.Data.IDbCommand, System.Data.IDbTransaction>
  nameWithType.vb: ValueTuple(Of IDbCommand, IDbTransaction)
  fullName.vb: System.ValueTuple(Of System.Data.IDbCommand, System.Data.IDbTransaction)
  name.vb: ValueTuple(Of IDbCommand, IDbTransaction)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDbCommand
    name: IDbCommand
    nameWithType: IDbCommand
    fullName: System.Data.IDbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDbCommand
    name: IDbCommand
    nameWithType: IDbCommand
    fullName: System.Data.IDbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: DatabaseAccessFactory.ExecuteNonQuery
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteNonQuery
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: IDatabaseAccess.ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  nameWithType.vb: IDatabaseAccess.ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
    name: ExecuteNonQuery
    nameWithType: IDatabaseAccess.ExecuteNonQuery
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
    name: ExecuteNonQuery
    nameWithType: IDatabaseAccess.ExecuteNonQuery
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar
  name: ExecuteScalar
  nameWithType: DatabaseAccessFactory.ExecuteScalar
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteScalar
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.ExecuteScalar(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: ExecuteScalar
    nameWithType: IDatabaseAccess.ExecuteScalar
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: ExecuteScalar
    nameWithType: IDatabaseAccess.ExecuteScalar
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction
  name: ExecuteTransaction
  nameWithType: DatabaseAccessFactory.ExecuteTransaction
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteTransaction
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: IDatabaseAccess.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  nameWithType.vb: IDatabaseAccess.ExecuteTransaction(List(Of String), Boolean, Boolean)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
    name: ExecuteTransaction
    nameWithType: IDatabaseAccess.ExecuteTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
    name: ExecuteTransaction
    nameWithType: IDatabaseAccess.ExecuteTransaction
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataReader*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetDataReader
  name: GetDataReader
  nameWithType: DatabaseAccessFactory.GetDataReader
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataReader
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataReader(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataReader(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataReader(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataReader
    nameWithType: IDatabaseAccess.GetDataReader
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataReader
    nameWithType: IDatabaseAccess.GetDataReader
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetDataTable
  name: GetDataTable
  nameWithType: DatabaseAccessFactory.GetDataTable
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTable
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataTable(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTable(String)
  nameWithType: IDatabaseAccess.GetDataTable(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
    name: GetDataTable
    nameWithType: IDatabaseAccess.GetDataTable
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema
  name: GetDataTableWithSchema
  nameWithType: DatabaseAccessFactory.GetDataTableWithSchema
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithSchema
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo
  name: GetDataTableWithKeyInfo
  nameWithType: DatabaseAccessFactory.GetDataTableWithKeyInfo
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetDataTableWithKeyInfo
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithSchema(String)
  nameWithType: IDatabaseAccess.GetDataTableWithSchema(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
    name: GetDataTableWithSchema
    nameWithType: IDatabaseAccess.GetDataTableWithSchema
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: GetDataTableWithKeyInfo(String)
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
    name: GetDataTableWithKeyInfo
    nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter
  name: GetNewParameter
  nameWithType: DatabaseAccessFactory.GetNewParameter
  fullName: DotNetHelper.Database.DatabaseAccessFactory.GetNewParameter
- uid: System.Data.Common.DbParameter
  commentId: T:System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: true
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: DotNetHelper.Database.DatabaseAccessFactory.CanConnect*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.CanConnect
  name: CanConnect
  nameWithType: DatabaseAccessFactory.CanConnect
  fullName: DotNetHelper.Database.DatabaseAccessFactory.CanConnect
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: CanConnect()
  nameWithType: IDatabaseAccess.CanConnect()
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect()
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
    name: CanConnect
    nameWithType: IDatabaseAccess.CanConnect
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
    name: CanConnect
    nameWithType: IDatabaseAccess.CanConnect
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.Get*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.Get
  name: Get
  nameWithType: DatabaseAccessFactory.Get
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Get
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: IDatabaseAccess.Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.String,System.Type,System.Object}
  commentId: T:System.Func{System.String,System.Type,System.Object}
  parent: System
  definition: System.Func`3
  name: Func<String, Type, Object>
  nameWithType: Func<String, Type, Object>
  fullName: System.Func<System.String, System.Type, System.Object>
  nameWithType.vb: Func(Of String, Type, Object)
  fullName.vb: System.Func(Of System.String, System.Type, System.Object)
  name.vb: Func(Of String, Type, Object)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  name: Get<T>()
  nameWithType: IDatabaseAccess.Get<T>()
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>()
  nameWithType.vb: IDatabaseAccess.Get(Of T)()
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)()
  name.vb: Get(Of T)()
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: IDatabaseAccess.Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  nameWithType.vb: IDatabaseAccess.Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  isExternal: true
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  nameWithType.vb: IDatabaseAccess.Get(Of T)(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get<T>
    nameWithType: IDatabaseAccess.Get<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
    name: Get(Of T)
    nameWithType: IDatabaseAccess.Get(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.CommandType
    name: CommandType
    nameWithType: CommandType
    fullName: System.Data.CommandType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.Execute*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.Execute
  name: Execute
  nameWithType: DatabaseAccessFactory.Execute
  fullName: DotNetHelper.Database.DatabaseAccessFactory.Execute
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  name: Execute<T>(T, ActionType)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: DotNetHelper.ObjectToSql.Enum.ActionType
  commentId: T:DotNetHelper.ObjectToSql.Enum.ActionType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper.ObjectToSql.Enum.ActionType
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  isExternal: true
  name: Execute<T>(T, ActionType)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object,System.String}
  commentId: T:System.Func{System.Object,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Object, String>
  nameWithType: Func<Object, String>
  fullName: System.Func<System.Object, System.String>
  nameWithType.vb: Func(Of Object, String)
  fullName.vb: System.Func(Of System.Object, System.String)
  name.vb: Func(Of Object, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  isExternal: true
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute<T>
    nameWithType: IDatabaseAccess.Execute<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
    name: Execute(Of T)
    nameWithType: IDatabaseAccess.Execute(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput
  name: ExecuteAndGetOutput
  nameWithType: DatabaseAccessFactory.ExecuteAndGetOutput
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutput
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutput(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutput(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader*
  commentId: Overload:DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader
  name: ExecuteAndGetOutputAsDataReader
  nameWithType: DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader
  fullName: DotNetHelper.Database.DatabaseAccessFactory.ExecuteAndGetOutputAsDataReader
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1({T},DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  definition: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExternal: true
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader<T>
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
    name: ExecuteAndGetOutputAsDataReader(Of T)
    nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
    fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DotNetHelper.ObjectToSql.Enum.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: DotNetHelper.ObjectToSql.Enum.ActionType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
