### YamlMime:ManagedReference
items:
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2
  commentId: T:DotNetHelper.Database.DataSource.DatabaseAccess`2
  id: DatabaseAccess`2
  parent: DotNetHelper.Database.DataSource
  children:
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan,System.TimeSpan)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.CanConnect
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.CommandTimeOut
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ConnectionTimeOut
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.String,System.Data.CommandType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable(System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema(System.String)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommandAndTransaction(System.Data.IDbConnection)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewConnection(System.Boolean)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewParameter(System.String,System.Object)
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.ObjectToSql
  - DotNetHelper.Database.DataSource.DatabaseAccess`2.SqlSyntaxHelper
  langs:
  - csharp
  - vb
  name: DatabaseAccess<C, P>
  nameWithType: DatabaseAccess<C, P>
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>
  type: Class
  source:
    id: DatabaseAccess
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 21
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public class DatabaseAccess<C, P>
          where C : class, IDbConnection, IDisposable, new()
          where P : DbParameter, new()
    typeParameters:
    - id: C
    - id: P
    content.vb: Public Class DatabaseAccess(Of C As {Class, IDbConnection, IDisposable, New}, P As {DbParameter, New})
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DatabaseAccess(Of C, P)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P)
  name.vb: DatabaseAccess(Of C, P)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.CommandTimeOut
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`2.CommandTimeOut
  id: CommandTimeOut
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: CommandTimeOut
  nameWithType: DatabaseAccess<C, P>.CommandTimeOut
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.CommandTimeOut
  type: Property
  source:
    id: CommandTimeOut
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 24
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public TimeSpan CommandTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property CommandTimeOut As TimeSpan
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.CommandTimeOut*
  nameWithType.vb: DatabaseAccess(Of C, P).CommandTimeOut
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).CommandTimeOut
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ConnectionTimeOut
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`2.ConnectionTimeOut
  id: ConnectionTimeOut
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ConnectionTimeOut
  nameWithType: DatabaseAccess<C, P>.ConnectionTimeOut
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ConnectionTimeOut
  type: Property
  source:
    id: ConnectionTimeOut
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 25
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public TimeSpan ConnectionTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property ConnectionTimeOut As TimeSpan
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ConnectionTimeOut*
  nameWithType.vb: DatabaseAccess(Of C, P).ConnectionTimeOut
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ConnectionTimeOut
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ObjectToSql
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`2.ObjectToSql
  id: ObjectToSql
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ObjectToSql
  nameWithType: DatabaseAccess<C, P>.ObjectToSql
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ObjectToSql
  type: Property
  source:
    id: ObjectToSql
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 27
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public ObjectToSql ObjectToSql { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Services.ObjectToSql
    content.vb: Public ReadOnly Property ObjectToSql As ObjectToSql
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ObjectToSql*
  nameWithType.vb: DatabaseAccess(Of C, P).ObjectToSql
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ObjectToSql
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.SqlSyntaxHelper
  commentId: P:DotNetHelper.Database.DataSource.DatabaseAccess`2.SqlSyntaxHelper
  id: SqlSyntaxHelper
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: SqlSyntaxHelper
  nameWithType: DatabaseAccess<C, P>.SqlSyntaxHelper
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.SqlSyntaxHelper
  type: Property
  source:
    id: SqlSyntaxHelper
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 28
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public SqlSyntaxHelper SqlSyntaxHelper { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
    content.vb: Public ReadOnly Property SqlSyntaxHelper As SqlSyntaxHelper
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.SqlSyntaxHelper*
  nameWithType.vb: DatabaseAccess(Of C, P).SqlSyntaxHelper
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).SqlSyntaxHelper
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: DatabaseAccess(DataBaseType)
  nameWithType: DatabaseAccess<C, P>.DatabaseAccess(DataBaseType)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  type: Constructor
  source:
    id: .ctor
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 32
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DatabaseAccess(DataBaseType type)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public Sub New(type As DataBaseType)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor*
  nameWithType.vb: DatabaseAccess(Of C, P).DatabaseAccess(DataBaseType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: DatabaseAccess(DataBaseType, String)
  nameWithType: DatabaseAccess<C, P>.DatabaseAccess(DataBaseType, String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String)
  type: Constructor
  source:
    id: .ctor
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 37
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DatabaseAccess(DataBaseType type, string connectionString)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    - id: connectionString
      type: System.String
    content.vb: Public Sub New(type As DataBaseType, connectionString As String)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor*
  nameWithType.vb: DatabaseAccess(Of C, P).DatabaseAccess(DataBaseType, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: DatabaseAccess(DataBaseType, String, TimeSpan)
  nameWithType: DatabaseAccess<C, P>.DatabaseAccess(DataBaseType, String, TimeSpan)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String, System.TimeSpan)
  type: Constructor
  source:
    id: .ctor
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 44
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DatabaseAccess(DataBaseType type, string connectionString, TimeSpan commandTimeOut)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    - id: connectionString
      type: System.String
    - id: commandTimeOut
      type: System.TimeSpan
    content.vb: Public Sub New(type As DataBaseType, connectionString As String, commandTimeOut As TimeSpan)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor*
  nameWithType.vb: DatabaseAccess(Of C, P).DatabaseAccess(DataBaseType, String, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String, System.TimeSpan)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan,System.TimeSpan)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan,System.TimeSpan)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.String,System.TimeSpan,System.TimeSpan)'
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: DatabaseAccess(DataBaseType, String, TimeSpan, TimeSpan)
  nameWithType: DatabaseAccess<C, P>.DatabaseAccess(DataBaseType, String, TimeSpan, TimeSpan)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    id: .ctor
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 52
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DatabaseAccess(DataBaseType type, string connectionString, TimeSpan commandTimeOut, TimeSpan connectionTimeOut)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    - id: connectionString
      type: System.String
    - id: commandTimeOut
      type: System.TimeSpan
    - id: connectionTimeOut
      type: System.TimeSpan
    content.vb: Public Sub New(type As DataBaseType, connectionString As String, commandTimeOut As TimeSpan, connectionTimeOut As TimeSpan)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor*
  nameWithType.vb: DatabaseAccess(Of C, P).DatabaseAccess(DataBaseType, String, TimeSpan, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).DatabaseAccess(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.String, System.TimeSpan, System.TimeSpan)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewConnection(System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewConnection(System.Boolean)
  id: GetNewConnection(System.Boolean)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetNewConnection(Boolean)
  nameWithType: DatabaseAccess<C, P>.GetNewConnection(Boolean)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewConnection(System.Boolean)
  type: Method
  source:
    id: GetNewConnection
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 64
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public IDbConnection GetNewConnection(bool openConnection)
    parameters:
    - id: openConnection
      type: System.Boolean
    return:
      type: System.Data.IDbConnection
    content.vb: Public Function GetNewConnection(openConnection As Boolean) As IDbConnection
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewConnection*
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewConnection(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewConnection(System.Boolean)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  id: GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: DatabaseAccess<C, P>.GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  type: Method
  source:
    id: GetNewCommand
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 72
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public IDbCommand GetNewCommand(IDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<IDataParameter> parameters = null)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
    return:
      type: System.Data.IDbCommand
    content.vb: Public Function GetNewCommand(connection As IDbConnection, sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of IDataParameter) = Nothing) As IDbCommand
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommand*
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommandAndTransaction(System.Data.IDbConnection)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommandAndTransaction(System.Data.IDbConnection)
  id: GetNewCommandAndTransaction(System.Data.IDbConnection)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetNewCommandAndTransaction(IDbConnection)
  nameWithType: DatabaseAccess<C, P>.GetNewCommandAndTransaction(IDbConnection)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewCommandAndTransaction(System.Data.IDbConnection)
  type: Method
  source:
    id: GetNewCommandAndTransaction
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 85
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public (IDbCommand command, IDbTransaction transaction)GetNewCommandAndTransaction(IDbConnection connection)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    return:
      type: System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
    content.vb: Public Function GetNewCommandAndTransaction(connection As IDbConnection) As(command As IDbCommand, transaction As IDbTransaction)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommandAndTransaction*
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewCommandAndTransaction(IDbConnection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewCommandAndTransaction(System.Data.IDbConnection)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  id: ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: DatabaseAccess<C, P>.ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  type: Method
  source:
    id: ExecuteNonQuery
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 105
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecute an SQL Command and returns the number of rows affected\n"
  example: []
  syntax:
    content: public int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ExecuteNonQuery(sql As String, commandType As CommandType, parameters As IEnumerable(Of IDataParameter) = Nothing) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery*
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<C, P>.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: ExecuteScalar
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 121
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  summary: "\nExecutes the sql and return the 1st column of the 1st row as an object\n"
  example: []
  syntax:
    content: public object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Public Function ExecuteScalar(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As Object
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteScalar*
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteScalar(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  id: ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: DatabaseAccess<C, P>.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: ExecuteTransaction
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 130
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.String}
    - id: rollbackOnException
      type: System.Boolean
    - id: throwException
      type: System.Boolean
    return:
      type: System.Int32
    content.vb: Public Function ExecuteTransaction(sqls As List(Of String), rollbackOnException As Boolean, throwException As Boolean = True) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteTransaction*
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteTransaction(List(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetDataReader(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<C, P>.GetDataReader(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: GetDataReader
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 161
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public IDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    return:
      type: System.Data.IDataReader
    content.vb: Public Function GetDataReader(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As IDataReader
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataReader*
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataReader(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<C, P>.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: GetDataTable
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 169
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: selectSql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    return:
      type: System.Data.DataTable
    content.vb: Public Function GetDataTable(selectSql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable*
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataTable(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable(System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable(System.String)
  id: GetDataTable(System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetDataTable(String)
  nameWithType: DatabaseAccess<C, P>.GetDataTable(String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataTable(System.String)
  type: Method
  source:
    id: GetDataTable
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 178
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DataTable GetDataTable(string selectSql)
    parameters:
    - id: selectSql
      type: System.String
    return:
      type: System.Data.DataTable
    content.vb: Public Function GetDataTable(selectSql As String) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable*
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataTable(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataTable(System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<C, P>.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: GetDataTableWithSchema
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 183
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    return:
      type: System.Data.DataTable
    content.vb: Public Function GetDataTableWithSchema(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema*
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema(System.String)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema(System.String)
  id: GetDataTableWithSchema(System.String)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String)
  nameWithType: DatabaseAccess<C, P>.GetDataTableWithSchema(String)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataTableWithSchema(System.String)
  type: Method
  source:
    id: GetDataTableWithSchema
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 198
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public DataTable GetDataTableWithSchema(string sql)
    parameters:
    - id: sql
      type: System.String
    return:
      type: System.Data.DataTable
    content.vb: Public Function GetDataTableWithSchema(sql As String) As DataTable
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema*
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataTableWithSchema(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataTableWithSchema(System.String)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewParameter(System.String,System.Object)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewParameter(System.String,System.Object)
  id: GetNewParameter(System.String,System.Object)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: GetNewParameter(String, Object)
  nameWithType: DatabaseAccess<C, P>.GetNewParameter(String, Object)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewParameter(System.String, System.Object)
  type: Method
  source:
    id: GetNewParameter
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 203
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public P GetNewParameter(string parameterName, object value)
    parameters:
    - id: parameterName
      type: System.String
    - id: value
      type: System.Object
    return:
      type: '{P}'
    content.vb: Public Function GetNewParameter(parameterName As String, value As Object) As P
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewParameter*
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewParameter(String, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewParameter(System.String, System.Object)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.CanConnect
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.CanConnect
  id: CanConnect
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: CanConnect()
  nameWithType: DatabaseAccess<C, P>.CanConnect()
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.CanConnect()
  type: Method
  source:
    id: CanConnect
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 210
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: public bool CanConnect()
    return:
      type: System.Boolean
    content.vb: Public Function CanConnect As Boolean
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.CanConnect*
  nameWithType.vb: DatabaseAccess(Of C, P).CanConnect()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).CanConnect()
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.String,System.Data.CommandType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.String,System.Data.CommandType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, Func<Object, String>, Func<Object, String>, Func<Object, String>, List<DbParameter>)
  nameWithType: DatabaseAccess<C, P>.Get<T>(String, CommandType, Func<Object, String>, Func<Object, String>, Func<Object, String>, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Get<T>(System.String, System.Data.CommandType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: Get
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 226
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, Func<object, string> xmlDeserializer, Func<object, string> jsonDeserializer, Func<object, string> csvDeserializer, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: xmlDeserializer
      type: System.Func{System.Object,System.String}
    - id: jsonDeserializer
      type: System.Func{System.Object,System.String}
    - id: csvDeserializer
      type: System.Func{System.Object,System.String}
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, xmlDeserializer As Func(Of Object, String), jsonDeserializer As Func(Of Object, String), csvDeserializer As Func(Of Object, String), parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get*
  nameWithType.vb: DatabaseAccess(Of C, P).Get(Of T)(String, CommandType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1
  id: Get``1
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: Get<T>()
  nameWithType: DatabaseAccess<C, P>.Get<T>()
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Get<T>()
  type: Method
  source:
    id: Get
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 231
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<T> Get<T>()
          where T : class
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get*
  nameWithType.vb: DatabaseAccess(Of C, P).Get(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Get(Of T)()
  name.vb: Get(Of T)()
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: Get``1(System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: Get<T>(Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: DatabaseAccess<C, P>.Get<T>(Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Get<T>(System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    id: Get
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 236
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<T> Get<T>(Func<object, string> xmlDeserializer, Func<object, string> jsonDeserializer, Func<object, string> csvDeserializer)
          where T : class
    parameters:
    - id: xmlDeserializer
      type: System.Func{System.Object,System.String}
    - id: jsonDeserializer
      type: System.Func{System.Object,System.String}
    - id: csvDeserializer
      type: System.Func{System.Object,System.String}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class)(xmlDeserializer As Func(Of Object, String), jsonDeserializer As Func(Of Object, String), csvDeserializer As Func(Of Object, String)) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get*
  nameWithType.vb: DatabaseAccess(Of C, P).Get(Of T)(Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Get(Of T)(System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Get(Of T)(Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: DatabaseAccess<C, P>.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: Get
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 242
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function Get(Of T As Class)(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get*
  nameWithType.vb: DatabaseAccess(Of C, P).Get(Of T)(String, CommandType, List(Of DbParameter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType)
  nameWithType: DatabaseAccess<C, P>.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    id: Execute
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 249
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute*
  nameWithType.vb: DatabaseAccess(Of C, P).Execute(Of T)(T, ActionType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer)
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer)
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer)
  nameWithType: DatabaseAccess<C, P>.Execute<T>(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer)
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer)
  type: Method
  source:
    id: Execute
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 257
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public int Execute<T>(T instance, ActionType actionType, IColumnSerializer xmlSerializer, IColumnSerializer jsonSerializer, IColumnSerializer csvSerializer)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlSerializer
      type: DotNetHelper.Database.Interface.IColumnSerializer
    - id: jsonSerializer
      type: DotNetHelper.Database.Interface.IColumnSerializer
    - id: csvSerializer
      type: DotNetHelper.Database.Interface.IColumnSerializer
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Function Execute(Of T As Class)(instance As T, actionType As ActionType, xmlSerializer As IColumnSerializer, jsonSerializer As IColumnSerializer, csvSerializer As IColumnSerializer) As Integer
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute*
  nameWithType.vb: DatabaseAccess(Of C, P).Execute(Of T)(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer)
  name.vb: Execute(Of T)(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer)
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<C, P>.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    id: ExecuteAndGetOutput
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 266
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput*
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,DotNetHelper.Database.Interface.IColumnSerializer,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.DataSource.DatabaseAccess`2
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer, Expression<Func<T, Object>>[])
  nameWithType: DatabaseAccess<C, P>.ExecuteAndGetOutput<T>(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    id: ExecuteAndGetOutput
    path: C:\Business\TheMoFaDe\Code\TheMofaDe\DotNetHelper.Database.Abstractions\src\DotNetHelper.Database.Abstractions\DataSource\DataBaseAccess.cs
    startLine: 274
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.DataSource
  syntax:
    content: >-
      public T ExecuteAndGetOutput<T>(T instance, ActionType actionType, IColumnSerializer xmlSerializer, IColumnSerializer jsonSerializer, IColumnSerializer csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlSerializer
      type: DotNetHelper.Database.Interface.IColumnSerializer
    - id: jsonSerializer
      type: DotNetHelper.Database.Interface.IColumnSerializer
    - id: csvSerializer
      type: DotNetHelper.Database.Interface.IColumnSerializer
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, xmlSerializer As IColumnSerializer, jsonSerializer As IColumnSerializer, csvSerializer As IColumnSerializer, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput*
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteAndGetOutput(Of T)(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer, DotNetHelper.Database.Interface.IColumnSerializer, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, IColumnSerializer, IColumnSerializer, IColumnSerializer, Expression(Of Func(Of T, Object))())
references:
- uid: DotNetHelper.Database.DataSource
  commentId: N:DotNetHelper.Database.DataSource
  name: DotNetHelper.Database.DataSource
  nameWithType: DotNetHelper.Database.DataSource
  fullName: DotNetHelper.Database.DataSource
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.CommandTimeOut*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.CommandTimeOut
  name: CommandTimeOut
  nameWithType: DatabaseAccess<C, P>.CommandTimeOut
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.CommandTimeOut
  nameWithType.vb: DatabaseAccess(Of C, P).CommandTimeOut
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).CommandTimeOut
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ConnectionTimeOut*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.ConnectionTimeOut
  name: ConnectionTimeOut
  nameWithType: DatabaseAccess<C, P>.ConnectionTimeOut
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ConnectionTimeOut
  nameWithType.vb: DatabaseAccess(Of C, P).ConnectionTimeOut
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ConnectionTimeOut
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ObjectToSql*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.ObjectToSql
  name: ObjectToSql
  nameWithType: DatabaseAccess<C, P>.ObjectToSql
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ObjectToSql
  nameWithType.vb: DatabaseAccess(Of C, P).ObjectToSql
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.Services.ObjectToSql
  parent: DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.Services.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services
  commentId: N:DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: DotNetHelper.ObjectToSql.Services
  nameWithType: DotNetHelper.ObjectToSql.Services
  fullName: DotNetHelper.ObjectToSql.Services
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.SqlSyntaxHelper*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.SqlSyntaxHelper
  name: SqlSyntaxHelper
  nameWithType: DatabaseAccess<C, P>.SqlSyntaxHelper
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.SqlSyntaxHelper
  nameWithType.vb: DatabaseAccess(Of C, P).SqlSyntaxHelper
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).SqlSyntaxHelper
- uid: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
  commentId: T:DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
  parent: DotNetHelper.ObjectToSql.Helper
  isExternal: true
  name: SqlSyntaxHelper
  nameWithType: SqlSyntaxHelper
  fullName: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
- uid: DotNetHelper.ObjectToSql.Helper
  commentId: N:DotNetHelper.ObjectToSql.Helper
  isExternal: true
  name: DotNetHelper.ObjectToSql.Helper
  nameWithType: DotNetHelper.ObjectToSql.Helper
  fullName: DotNetHelper.ObjectToSql.Helper
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.#ctor
  name: DatabaseAccess
  nameWithType: DatabaseAccess<C, P>.DatabaseAccess
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.DatabaseAccess
  nameWithType.vb: DatabaseAccess(Of C, P).DatabaseAccess
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).DatabaseAccess
- uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
  commentId: T:DotNetHelper.ObjectToSql.Enum.DataBaseType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
- uid: DotNetHelper.ObjectToSql.Enum
  commentId: N:DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DotNetHelper.ObjectToSql.Enum
  nameWithType: DotNetHelper.ObjectToSql.Enum
  fullName: DotNetHelper.ObjectToSql.Enum
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewConnection*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewConnection
  name: GetNewConnection
  nameWithType: DatabaseAccess<C, P>.GetNewConnection
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewConnection
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewConnection
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommand*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommand
  name: GetNewCommand
  nameWithType: DatabaseAccess<C, P>.GetNewCommand
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewCommand
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewCommand
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewCommand
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDataParameter>
  nameWithType: IEnumerable<IDataParameter>
  fullName: System.Collections.Generic.IEnumerable<System.Data.IDataParameter>
  nameWithType.vb: IEnumerable(Of IDataParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter)
  name.vb: IEnumerable(Of IDataParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDbCommand
  commentId: T:System.Data.IDbCommand
  parent: System.Data
  isExternal: true
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommandAndTransaction*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewCommandAndTransaction
  name: GetNewCommandAndTransaction
  nameWithType: DatabaseAccess<C, P>.GetNewCommandAndTransaction
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewCommandAndTransaction
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewCommandAndTransaction
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewCommandAndTransaction
- uid: System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
  commentId: T:System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
  parent: System
  isExternal: true
  name: ValueTuple<IDbCommand, IDbTransaction>
  nameWithType: ValueTuple<IDbCommand, IDbTransaction>
  fullName: System.ValueTuple<System.Data.IDbCommand, System.Data.IDbTransaction>
  nameWithType.vb: ValueTuple(Of IDbCommand, IDbTransaction)
  fullName.vb: System.ValueTuple(Of System.Data.IDbCommand, System.Data.IDbTransaction)
  name.vb: ValueTuple(Of IDbCommand, IDbTransaction)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDbCommand
    name: IDbCommand
    nameWithType: IDbCommand
    fullName: System.Data.IDbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDbCommand
    name: IDbCommand
    nameWithType: IDbCommand
    fullName: System.Data.IDbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: DatabaseAccess<C, P>.ExecuteNonQuery
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteNonQuery
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteNonQuery
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteNonQuery
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteScalar*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteScalar
  name: ExecuteScalar
  nameWithType: DatabaseAccess<C, P>.ExecuteScalar
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteScalar
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteScalar
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteScalar
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteTransaction*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteTransaction
  name: ExecuteTransaction
  nameWithType: DatabaseAccess<C, P>.ExecuteTransaction
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteTransaction
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteTransaction
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteTransaction
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataReader*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataReader
  name: GetDataReader
  nameWithType: DatabaseAccess<C, P>.GetDataReader
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataReader
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataReader
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataReader
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTable
  name: GetDataTable
  nameWithType: DatabaseAccess<C, P>.GetDataTable
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataTable
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataTable
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetDataTableWithSchema
  name: GetDataTableWithSchema
  nameWithType: DatabaseAccess<C, P>.GetDataTableWithSchema
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetDataTableWithSchema
  nameWithType.vb: DatabaseAccess(Of C, P).GetDataTableWithSchema
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetDataTableWithSchema
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewParameter*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.GetNewParameter
  name: GetNewParameter
  nameWithType: DatabaseAccess<C, P>.GetNewParameter
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.GetNewParameter
  nameWithType.vb: DatabaseAccess(Of C, P).GetNewParameter
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).GetNewParameter
- uid: '{P}'
  commentId: '!:P'
  definition: P
  name: P
  nameWithType: P
  fullName: P
- uid: P
  commentId: '!:P'
  name: P
  nameWithType: P
  fullName: P
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.CanConnect*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.CanConnect
  name: CanConnect
  nameWithType: DatabaseAccess<C, P>.CanConnect
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.CanConnect
  nameWithType.vb: DatabaseAccess(Of C, P).CanConnect
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).CanConnect
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Get*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.Get
  name: Get
  nameWithType: DatabaseAccess<C, P>.Get
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Get
  nameWithType.vb: DatabaseAccess(Of C, P).Get
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Get
- uid: System.Func{System.Object,System.String}
  commentId: T:System.Func{System.Object,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Object, String>
  nameWithType: Func<Object, String>
  fullName: System.Func<System.Object, System.String>
  nameWithType.vb: Func(Of Object, String)
  fullName.vb: System.Func(Of System.Object, System.String)
  name.vb: Func(Of Object, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.Execute
  name: Execute
  nameWithType: DatabaseAccess<C, P>.Execute
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.Execute
  nameWithType.vb: DatabaseAccess(Of C, P).Execute
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).Execute
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: DotNetHelper.ObjectToSql.Enum.ActionType
  commentId: T:DotNetHelper.ObjectToSql.Enum.ActionType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper.ObjectToSql.Enum.ActionType
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: DotNetHelper.Database.Interface.IColumnSerializer
  commentId: T:DotNetHelper.Database.Interface.IColumnSerializer
  parent: DotNetHelper.Database.Interface
  name: IColumnSerializer
  nameWithType: IColumnSerializer
  fullName: DotNetHelper.Database.Interface.IColumnSerializer
- uid: DotNetHelper.Database.Interface
  commentId: N:DotNetHelper.Database.Interface
  name: DotNetHelper.Database.Interface
  nameWithType: DotNetHelper.Database.Interface
  fullName: DotNetHelper.Database.Interface
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput*
  commentId: Overload:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteAndGetOutput
  name: ExecuteAndGetOutput
  nameWithType: DatabaseAccess<C, P>.ExecuteAndGetOutput
  fullName: DotNetHelper.Database.DataSource.DatabaseAccess<C, P>.ExecuteAndGetOutput
  nameWithType.vb: DatabaseAccess(Of C, P).ExecuteAndGetOutput
  fullName.vb: DotNetHelper.Database.DataSource.DatabaseAccess(Of C, P).ExecuteAndGetOutput
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
