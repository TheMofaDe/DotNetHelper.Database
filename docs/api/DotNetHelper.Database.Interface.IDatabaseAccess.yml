### YamlMime:ManagedReference
items:
- uid: DotNetHelper.Database.Interface.IDatabaseAccess
  commentId: T:DotNetHelper.Database.Interface.IDatabaseAccess
  id: IDatabaseAccess
  parent: DotNetHelper.Database.Interface
  children:
  - DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  - DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  - DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  - DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  - DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  - DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  - DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  langs:
  - csharp
  - vb
  name: IDatabaseAccess
  nameWithType: IDatabaseAccess
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess
  type: Interface
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: IDatabaseAccess
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 11
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: public interface IDatabaseAccess
    content.vb: Public Interface IDatabaseAccess
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  id: CommandTimeOut
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: CommandTimeOut
  nameWithType: IDatabaseAccess.CommandTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CommandTimeOut
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 13
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: TimeSpan CommandTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Property CommandTimeOut As TimeSpan
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  id: ConnectionTimeOut
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ConnectionTimeOut
  nameWithType: IDatabaseAccess.ConnectionTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ConnectionTimeOut
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 14
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: TimeSpan ConnectionTimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Property ConnectionTimeOut As TimeSpan
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  id: DatabaseType
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: IDatabaseAccess.DatabaseType
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: DatabaseType
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 15
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: DataBaseType DatabaseType { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: ReadOnly Property DatabaseType As DataBaseType
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  id: ObjectToSql
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ObjectToSql
  nameWithType: IDatabaseAccess.ObjectToSql
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ObjectToSql
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 16
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: ObjectToSql ObjectToSql { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Services.ObjectToSql
    content.vb: ReadOnly Property ObjectToSql As ObjectToSql
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  commentId: P:DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  id: SqlSyntaxHelper
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: SqlSyntaxHelper
  nameWithType: IDatabaseAccess.SqlSyntaxHelper
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  type: Property
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: SqlSyntaxHelper
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 17
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: SqlSyntaxHelper SqlSyntaxHelper { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
    content.vb: ReadOnly Property SqlSyntaxHelper As SqlSyntaxHelper
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  id: GetNewCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: IDatabaseAccess.GetNewCommand(IDbConnection, String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommand
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 19
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: IDbCommand GetNewCommand(IDbConnection connection, string sql, CommandType commandType = CommandType.Text, IEnumerable<IDataParameter> parameters = null)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
    return:
      type: System.Data.IDbCommand
    content.vb: Function GetNewCommand(connection As IDbConnection, sql As String, commandType As CommandType = CommandType.Text, parameters As IEnumerable(Of IDataParameter) = Nothing) As IDbCommand
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand*
  nameWithType.vb: IDatabaseAccess.GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand(System.Data.IDbConnection, System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: GetNewCommand(IDbConnection, String, CommandType, IEnumerable(Of IDataParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  id: GetNewCommandAndTransaction(System.Data.IDbConnection)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetNewCommandAndTransaction(IDbConnection)
  nameWithType: IDatabaseAccess.GetNewCommandAndTransaction(IDbConnection)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction(System.Data.IDbConnection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetNewCommandAndTransaction
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 20
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: (IDbCommand command, IDbTransaction transaction)GetNewCommandAndTransaction(IDbConnection connection)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
    return:
      type: System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
    content.vb: Function GetNewCommandAndTransaction(connection As IDbConnection) As(command As IDbCommand, transaction As IDbTransaction)
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction*
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  id: ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  nameWithType: IDatabaseAccess.ExecuteNonQuery(String, CommandType, IEnumerable<IDataParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable<System.Data.IDataParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteNonQuery
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 31
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nExecute an SQL Command and returns the number of rows affected\n"
  example: []
  syntax:
    content: int ExecuteNonQuery(string sql, CommandType commandType, IEnumerable<IDataParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Function ExecuteNonQuery(sql As String, commandType As CommandType, parameters As IEnumerable(Of IDataParameter) = Nothing) As Integer
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
  see:
  - linkId: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
    commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  nameWithType.vb: IDatabaseAccess.ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery(System.String, System.Data.CommandType, System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter))
  name.vb: ExecuteNonQuery(String, CommandType, IEnumerable(Of IDataParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteScalar(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.ExecuteScalar(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteScalar
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 42
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nExecutes the sql and return the 1st column of the 1st row as an object\n"
  example: []
  syntax:
    content: object ExecuteScalar(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: Function ExecuteScalar(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As Object
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar*
  nameWithType.vb: IDatabaseAccess.ExecuteScalar(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteScalar(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  id: ExecuteTransaction(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteTransaction(List<String>, Boolean, Boolean)
  nameWithType: IDatabaseAccess.ExecuteTransaction(List<String>, Boolean, Boolean)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteTransaction
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 45
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: int ExecuteTransaction(List<string> sqls, bool rollbackOnException, bool throwException = true)
    parameters:
    - id: sqls
      type: System.Collections.Generic.List{System.String}
    - id: rollbackOnException
      type: System.Boolean
    - id: throwException
      type: System.Boolean
    return:
      type: System.Int32
    content.vb: Function ExecuteTransaction(sqls As List(Of String), rollbackOnException As Boolean, throwException As Boolean = True) As Integer
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction*
  nameWithType.vb: IDatabaseAccess.ExecuteTransaction(List(Of String), Boolean, Boolean)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction(System.Collections.Generic.List(Of System.String), System.Boolean, System.Boolean)
  name.vb: ExecuteTransaction(List(Of String), Boolean, Boolean)
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataReader(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataReader(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataReader
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 47
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: IDataReader GetDataReader(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    return:
      type: System.Data.IDataReader
    content.vb: Function GetDataReader(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As IDataReader
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader*
  nameWithType.vb: IDatabaseAccess.GetDataReader(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataReader(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataTable(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTable(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 56
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: DataTable GetDataTable(string selectSql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Function GetDataTable(selectSql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable*
  nameWithType.vb: IDatabaseAccess.GetDataTable(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTable(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  id: GetDataTable(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataTable(String)
  nameWithType: IDatabaseAccess.GetDataTable(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTable
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 63
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nexecute the sql and load the results into a dataTable\n"
  example: []
  syntax:
    content: DataTable GetDataTable(string selectSql)
    parameters:
    - id: selectSql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Function GetDataTable(selectSql As String) As DataTable
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable*
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithSchema(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTableWithSchema(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 72
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: DataTable GetDataTableWithSchema(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Function GetDataTableWithSchema(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema*
  nameWithType.vb: IDatabaseAccess.GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithSchema(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: GetDataTableWithKeyInfo(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 82
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better performance\n"
  example: []
  syntax:
    content: DataTable GetDataTableWithKeyInfo(string sql, CommandType commandType, List<DbParameter> parameters = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Function GetDataTableWithKeyInfo(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As DataTable
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo*
  nameWithType.vb: IDatabaseAccess.GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: GetDataTableWithKeyInfo(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  id: GetDataTableWithSchema(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataTableWithSchema(String)
  nameWithType: IDatabaseAccess.GetDataTableWithSchema(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithSchema
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 89
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set\n"
  example: []
  syntax:
    content: DataTable GetDataTableWithSchema(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Function GetDataTableWithSchema(sql As String) As DataTable
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema*
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  id: GetDataTableWithKeyInfo(System.String)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: GetDataTableWithKeyInfo(String)
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo(String)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: GetDataTableWithKeyInfo
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 97
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nApplies the schema/metadata of the sql to a dataTable and populate it with the result set.\nIf working with a large dataSet and you don&apos;t need the dataTable which columns are primary keys then use GetDataTableWithSchema for better proformance\n"
  example: []
  syntax:
    content: DataTable GetDataTableWithKeyInfo(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Function GetDataTableWithKeyInfo(sql As String) As DataTable
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo*
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  id: CanConnect
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: CanConnect()
  nameWithType: IDatabaseAccess.CanConnect()
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: CanConnect
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 100
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: bool CanConnect()
    return:
      type: System.Boolean
    content.vb: Function CanConnect As Boolean
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect*
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  nameWithType: IDatabaseAccess.Get<T>(String, CommandType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.String, System.Data.CommandType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 113
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  summary: "\nExecutes the specified sql and maps the results a list of objects\n"
  example: []
  syntax:
    content: >-
      List<T> Get<T>(string sql, CommandType commandType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: commandType
      type: System.Data.CommandType
      description: ''
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
      description: ''
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: 'The sql result mapped to a list of '
    content.vb: Function Get(Of T As Class)(sql As String, commandType As CommandType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.Get*
  nameWithType.vb: IDatabaseAccess.Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.String, System.Data.CommandType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1
  id: Get``1
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: Get<T>()
  nameWithType: IDatabaseAccess.Get<T>()
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>()
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 115
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      List<T> Get<T>()
          where T : class
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Function Get(Of T As Class) As List(Of T)
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.Get*
  nameWithType.vb: IDatabaseAccess.Get(Of T)()
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)()
  name.vb: Get(Of T)()
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  id: Get``1(System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  nameWithType: IDatabaseAccess.Get<T>(Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 116
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      List<T> Get<T>(Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer)
          where T : class
    parameters:
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Function Get(Of T As Class)(xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object)) As List(Of T)
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.Get*
  nameWithType.vb: IDatabaseAccess.Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object))
  name.vb: Get(Of T)(Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: Get``1(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: Get<T>(String, CommandType, List<DbParameter>)
  nameWithType: IDatabaseAccess.Get<T>(String, CommandType, List<DbParameter>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get<T>(System.String, System.Data.CommandType, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Get
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 117
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      List<T> Get<T>(string sql, CommandType commandType, List<DbParameter> parameters = null)
          where T : class
    parameters:
    - id: sql
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Function Get(Of T As Class)(sql As String, commandType As CommandType, parameters As List(Of DbParameter) = Nothing) As List(Of T)
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.Get*
  nameWithType.vb: IDatabaseAccess.Get(Of T)(String, CommandType, List(Of DbParameter))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Get(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: Get(Of T)(String, CommandType, List(Of DbParameter))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 118
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      int Execute<T>(T instance, ActionType actionType)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Function Execute(Of T As Class)(instance As T, actionType As ActionType) As Integer
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.Execute*
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType)
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: Execute(Of T)(T, ActionType)
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: Execute``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.String,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: IDatabaseAccess.Execute<T>(T, ActionType, String, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: Execute
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 119
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      int Execute<T>(T instance, ActionType actionType, string tableName, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: tableName
      type: System.String
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Function Execute(Of T As Class)(instance As T, actionType As ActionType, tableName As String, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String)) As Integer
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.Execute*
  nameWithType.vb: IDatabaseAccess.Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.Execute(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.String, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: Execute(Of T)(T, ActionType, String, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 120
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      T ExecuteAndGetOutput<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput*
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutput``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.String,System.Type,System.Object},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput<T>(T, ActionType, Func<String, Type, Object>, Func<String, Type, Object>, Func<String, Type, Object>, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.String, System.Type, System.Object>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutput
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 122
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      T ExecuteAndGetOutput<T>(T instance, ActionType actionType, Func<string, Type, object> xmlDeserializer, Func<string, Type, object> jsonDeserializer, Func<string, Type, object> csvDeserializer, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: jsonDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: csvDeserializer
      type: System.Func{System.String,System.Type,System.Object}
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ExecuteAndGetOutput(Of T As Class)(instance As T, actionType As ActionType, xmlDeserializer As Func(Of String, Type, Object), jsonDeserializer As Func(Of String, Type, Object), csvDeserializer As Func(Of String, Type, Object), xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As T
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput*
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.String, System.Type, System.Object), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutput(Of T)(T, ActionType, Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of String, Type, Object), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 127
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.IDataReader
    content.vb: Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As IDataReader
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader*
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: ExecuteAndGetOutputAsDataReader``1(``0,DotNetHelper.ObjectToSql.Enum.ActionType,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.Database.Interface.IDatabaseAccess
  langs:
  - csharp
  - vb
  name: ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, ActionType, Func<Object, String>, Func<Object, String>, Func<Object, String>, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader<T>(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.Database.git
    id: ExecuteAndGetOutputAsDataReader
    path: ../src/DotNetHelper.Database/Interface/IDatabaseAccess.cs
    startLine: 129
  assemblies:
  - DotNetHelper.Database
  namespace: DotNetHelper.Database.Interface
  syntax:
    content: >-
      IDataReader ExecuteAndGetOutputAsDataReader<T>(T instance, ActionType actionType, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: xmlSerializer
      type: System.Func{System.Object,System.String}
    - id: jsonSerializer
      type: System.Func{System.Object,System.String}
    - id: csvSerializer
      type: System.Func{System.Object,System.String}
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.Data.IDataReader
    content.vb: Function ExecuteAndGetOutputAsDataReader(Of T As Class)(instance As T, actionType As ActionType, xmlSerializer As Func(Of Object, String), jsonSerializer As Func(Of Object, String), csvSerializer As Func(Of Object, String), ParamArray outputFields As Expression(Of Func(Of T, Object))()) As IDataReader
  overload: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader*
  nameWithType.vb: IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
  fullName.vb: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader(Of T)(T, DotNetHelper.ObjectToSql.Enum.ActionType, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: ExecuteAndGetOutputAsDataReader(Of T)(T, ActionType, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String), Expression(Of Func(Of T, Object))())
references:
- uid: DotNetHelper.Database.Interface
  commentId: N:DotNetHelper.Database.Interface
  name: DotNetHelper.Database.Interface
  nameWithType: DotNetHelper.Database.Interface
  fullName: DotNetHelper.Database.Interface
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
  name: CommandTimeOut
  nameWithType: IDatabaseAccess.CommandTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CommandTimeOut
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
  name: ConnectionTimeOut
  nameWithType: IDatabaseAccess.ConnectionTimeOut
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ConnectionTimeOut
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
  name: DatabaseType
  nameWithType: IDatabaseAccess.DatabaseType
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.DatabaseType
- uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
  commentId: T:DotNetHelper.ObjectToSql.Enum.DataBaseType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
- uid: DotNetHelper.ObjectToSql.Enum
  commentId: N:DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: DotNetHelper.ObjectToSql.Enum
  nameWithType: DotNetHelper.ObjectToSql.Enum
  fullName: DotNetHelper.ObjectToSql.Enum
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
  name: ObjectToSql
  nameWithType: IDatabaseAccess.ObjectToSql
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.Services.ObjectToSql
  parent: DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.Services.ObjectToSql
- uid: DotNetHelper.ObjectToSql.Services
  commentId: N:DotNetHelper.ObjectToSql.Services
  isExternal: true
  name: DotNetHelper.ObjectToSql.Services
  nameWithType: DotNetHelper.ObjectToSql.Services
  fullName: DotNetHelper.ObjectToSql.Services
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
  name: SqlSyntaxHelper
  nameWithType: IDatabaseAccess.SqlSyntaxHelper
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.SqlSyntaxHelper
- uid: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
  commentId: T:DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
  parent: DotNetHelper.ObjectToSql.Helper
  isExternal: true
  name: SqlSyntaxHelper
  nameWithType: SqlSyntaxHelper
  fullName: DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper
- uid: DotNetHelper.ObjectToSql.Helper
  commentId: N:DotNetHelper.ObjectToSql.Helper
  isExternal: true
  name: DotNetHelper.ObjectToSql.Helper
  nameWithType: DotNetHelper.ObjectToSql.Helper
  fullName: DotNetHelper.ObjectToSql.Helper
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand
  name: GetNewCommand
  nameWithType: IDatabaseAccess.GetNewCommand
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommand
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.IDataParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDataParameter>
  nameWithType: IEnumerable<IDataParameter>
  fullName: System.Collections.Generic.IEnumerable<System.Data.IDataParameter>
  nameWithType.vb: IEnumerable(Of IDataParameter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.IDataParameter)
  name.vb: IEnumerable(Of IDataParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: System.Data.IDataParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDbCommand
  commentId: T:System.Data.IDbCommand
  parent: System.Data
  isExternal: true
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction
  name: GetNewCommandAndTransaction
  nameWithType: IDatabaseAccess.GetNewCommandAndTransaction
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetNewCommandAndTransaction
- uid: System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
  commentId: T:System.ValueTuple{System.Data.IDbCommand,System.Data.IDbTransaction}
  parent: System
  isExternal: true
  name: ValueTuple<IDbCommand, IDbTransaction>
  nameWithType: ValueTuple<IDbCommand, IDbTransaction>
  fullName: System.ValueTuple<System.Data.IDbCommand, System.Data.IDbTransaction>
  nameWithType.vb: ValueTuple(Of IDbCommand, IDbTransaction)
  fullName.vb: System.ValueTuple(Of System.Data.IDbCommand, System.Data.IDbTransaction)
  name.vb: ValueTuple(Of IDbCommand, IDbTransaction)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDbCommand
    name: IDbCommand
    nameWithType: IDbCommand
    fullName: System.Data.IDbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDbCommand
    name: IDbCommand
    nameWithType: IDbCommand
    fullName: System.Data.IDbCommand
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  commentId: M:DotNetHelper.Database.DataSource.DatabaseAccess`2.ExecuteNonQuery(`0,System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: IDatabaseAccess.ExecuteNonQuery
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteNonQuery
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar
  name: ExecuteScalar
  nameWithType: IDatabaseAccess.ExecuteScalar
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteScalar
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction
  name: ExecuteTransaction
  nameWithType: IDatabaseAccess.ExecuteTransaction
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteTransaction
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader
  name: GetDataReader
  nameWithType: IDatabaseAccess.GetDataReader
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataReader
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
  name: GetDataTable
  nameWithType: IDatabaseAccess.GetDataTable
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
  name: GetDataTableWithSchema
  nameWithType: IDatabaseAccess.GetDataTableWithSchema
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithSchema
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
  name: GetDataTableWithKeyInfo
  nameWithType: IDatabaseAccess.GetDataTableWithKeyInfo
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.GetDataTableWithKeyInfo
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
  name: CanConnect
  nameWithType: IDatabaseAccess.CanConnect
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.CanConnect
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Get*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.Get
  name: Get
  nameWithType: IDatabaseAccess.Get
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Get
- uid: System.Func{System.String,System.Type,System.Object}
  commentId: T:System.Func{System.String,System.Type,System.Object}
  parent: System
  definition: System.Func`3
  name: Func<String, Type, Object>
  nameWithType: Func<String, Type, Object>
  fullName: System.Func<System.String, System.Type, System.Object>
  nameWithType.vb: Func(Of String, Type, Object)
  fullName.vb: System.Func(Of System.String, System.Type, System.Object)
  name.vb: Func(Of String, Type, Object)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.Execute*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.Execute
  name: Execute
  nameWithType: IDatabaseAccess.Execute
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.Execute
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: DotNetHelper.ObjectToSql.Enum.ActionType
  commentId: T:DotNetHelper.ObjectToSql.Enum.ActionType
  parent: DotNetHelper.ObjectToSql.Enum
  isExternal: true
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper.ObjectToSql.Enum.ActionType
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{System.Object,System.String}
  commentId: T:System.Func{System.Object,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Object, String>
  nameWithType: Func<Object, String>
  fullName: System.Func<System.Object, System.String>
  nameWithType.vb: Func(Of Object, String)
  fullName.vb: System.Func(Of System.Object, System.String)
  name.vb: Func(Of Object, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput
  name: ExecuteAndGetOutput
  nameWithType: IDatabaseAccess.ExecuteAndGetOutput
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutput
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader*
  commentId: Overload:DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader
  name: ExecuteAndGetOutputAsDataReader
  nameWithType: IDatabaseAccess.ExecuteAndGetOutputAsDataReader
  fullName: DotNetHelper.Database.Interface.IDatabaseAccess.ExecuteAndGetOutputAsDataReader
